<?xml version="1.0"?>
<doc>
<assembly>
<name>
ATLib
</name>
</assembly>
<members>
<member name="M:ATLib.CommonRoutines.GetApplicationPath">
	<summary>
 Relative path of the web application. This field
 is normally plugged from Request.ApplicationPath, and is used as a property in databinding
 </summary>
</member><member name="M:ATLib.CommonRoutines.RandomInteger">
	<summary>
 returns a random integer in the range 1 to 2,147,483,647. 
 This is used as a query string for image output
 to ensure that each image name is unique and is not cached by the browser
 </summary>
</member><member name="M:ATLib.CommonRoutines.RandomInteger(System.Int32,System.Int32)">
	<summary>
 returns a random integer in the range 1 to 2,147,483,647. 
 This is used as a query string for image output
 to ensure that each image name is unique and is not cached by the browser
 </summary>
</member><member name="M:ATLib.CommonRoutines.RandomizeArray(System.Int32[])">
	<summary>
 randomises an integer array. Use for unsorting collection of retrieved objects into random order
 </summary>
	<param name="items"></param>
	<remarks></remarks>
</member><member name="M:ATLib.CommonRoutines.String2ByteArray(System.String)">
	<summary>
 Diagnostic routine to display text string as byte values in the VS Watch window
 </summary>
	<param name="s">Sting to display</param>
	<returns>Byte array of character values</returns>
</member><member name="M:ATLib.CommonRoutines.Cout(System.String,System.String)">
	<summary>
 HTML Conditional output. Conditionally outputs the first parameter only if it is non-blank, and 
 if so, follows this with the second parameter, which can be a literal like "<BR/>"
 This function therefore provides a basic HTML conditional formatter at the markup level
 </summary>
	<param name="param1">parameter to conditionally outuput</param>
	<param name="param2">second parameter, follows first only if first output</param>
	<returns>String to render</returns>
</member><member name="M:ATLib.CommonRoutines.ConvertCRLF2LF(System.String)">
	<summary>
 Converts a string containing one or more CRLF line end characters as supplied in textarea control into a LF character.
  This is used so that InDesign will produce a hard line end rather than a Para / Line end sequence
 </summary>
	<param name="s">the string field containing crlf sequences</param>
	<returns>The string converted as specified</returns>
</member><member name="M:ATLib.CommonRoutines.validateDollars(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Validates a string to be a valid price in dollars and cents. Exception thrown if validation fails
 </summary>
	<param name="fieldname">the field name to include in the exception message</param>
	<param name="value">String to validate</param>
	<param name="min">minimum range in cents</param>
	<param name="max">maximum range in cents</param>
	<returns>an integer value of the string, converted to cents</returns>
</member><member name="M:ATLib.CommonRoutines.Int2Hex(System.Int32)">
	<summary>
 Converts a 32 bit integer to an eight character hex string value
 </summary>
	<param name="value">integer value to convert</param>
	<returns>fixed length hex string of 8 characters</returns>
</member><member name="M:ATLib.CommonRoutines.Int2ShortHex(System.Int32)">
	<summary>
 Converts a 32 bit integer to an eight character hex string value
 </summary>
	<param name="value">integer value to convert</param>
	<returns>fixed length hex string of 8 characters</returns>
</member><member name="M:ATLib.CommonRoutines.Hex2Int(System.String)">
	<summary>
 Converts a fixed length hex string of eight characters to a 32 bit integer
 </summary>
	<param name="value">Hex string to convert</param>
	<returns>integer value</returns>
</member><member name="M:ATLib.CommonRoutines.Integer2Dollars(System.Int32)">
	<summary>
 Converts an integer value in cents to a dollars and cents string in the form nn.dd
 </summary>
	<param name="value">number of cents</param>
	<returns>dollar value</returns>
</member><member name="M:ATLib.CommonRoutines.Dollars2Integer(System.String)">
	<summary>
 Converts a dollar value as a string into cents
 </summary>
	<param name="value">Dollar value in the form nn.dd</param>
	<returns>Number of cents</returns>
</member><member name="M:ATLib.CommonRoutines.Integer2mm(System.Int32,System.Int32)">
	<summary>
 Converts an integer value into mm, according to the place count. For example
 4350 with a place count of 3 would return 4.350
 </summary>
	<param name="value">value consistent with place count</param>
	<param name="places">number of places</param>
	<returns>String value, converted consistent with placecount</returns>
</member><member name="M:ATLib.CommonRoutines.mm2Integer(System.String)">
	<summary>
 Converts a string value as a string into integer * 1000
 </summary>
	<param name="value">Dollar value in the form nn.dd</param>
	<returns>Number of cents</returns>
</member><member name="M:ATLib.CommonRoutines.IPBytes2Int(System.Byte[])">
	<summary>
 Converts an IPV4 address of four bytes into a 32 bit integer
 </summary>
	<param name="IP">Byte array of four bytes</param>
	<returns>Integer value</returns>
</member><member name="M:ATLib.CommonRoutines.IPInt2String(System.Int32)">
	<summary>
 Converts an IP address expressed as an integer into a string, eg 192.168.0.1
 </summary>
	<param name="IP">IP address as integer</param>
	<returns>String representation of address</returns>
</member><member name="M:ATLib.CommonRoutines.Sanitize(System.String)">
	<summary>
 Sanitizes the supplied string by triming left and right spaces, stripping illegal characters, and truncates it to 
 ATSystem.SysConstants.CharLength in length if necessary.
 </summary>
	<param name="s">string value</param>
	<returns>stripped and truncated string</returns>
</member><member name="M:ATLib.CommonRoutines.Sanitize(System.String,System.Int32)">
	<summary>
 Sanitizes the supplied string by triming left and right spaces, stripping illegal characters, and truncates it to 
 the supplied maxLength param if necessary.
 </summary>
	<param name="s">string value</param>
	<param name="maxlength">maximum length of returned string</param>
	<returns>stripped and truncated string</returns>
</member><member name="M:ATLib.CommonRoutines.Xtn2Type(System.String)">
	<summary>
 Maps a standard image extension eg .bmp, .eps, .gif etc to the Image.Imagetypes values
 </summary>
	<param name="xtn">string value of extension</param>
	<returns>enum value of extension</returns>
</member><member name="M:ATLib.CommonRoutines.Type2Xtn(ATLib.Image.ImageTypes)">
	<summary>
 Maps an enum from Image.Image types to  a standard image extension eg .bmp, .eps, .gif etc
 </summary>
	<param name="imagetype">Imagetype from Image.ImageTypes enum</param>
	<returns>string extension</returns>
</member><member name="M:ATLib.CommonRoutines.IsFileInUse(System.String)">
	<summary>
 Checks if a file is in use - that is if it is open anywhere
 </summary>
	<param name="filename">fully qualified filename to check</param>
	<returns>True if the file is open , false otherwise</returns>
</member><member name="T:ATLib.CommonRoutines">
	<summary>
 The CommonRoutines module provides a set of static methods which can be used as required. This centralizes
 code to a common point for frequently used one line routines.
 </summary>
</member><member name="M:ATLib.EnumAssistant.#ctor">
	<summary>
 Instantiates the object.
 </summary>
	<remarks>It would be easier to use the overloaded instantiator, which specifies the enum type.</remarks>
</member><member name="M:ATLib.EnumAssistant.#ctor(System.Enum)">
	<summary>
 Instantiates the object and primes it with an instantiation of a specific enum type.
 </summary>
	<param name="x">[Enum] type</param>
	<example>
		<code>
 dim control as control
 dim EA as New EnumAssistant(New ShippingAssistant.ShipMethods)
 control.DataSource = EA
 control.databind
</code></example>
</member><member name="M:ATLib.EnumAssistant.#ctor(System.Enum,System.Int32,System.Int32)">
	<summary>
 Instantiates the object and primes it with an instantiation of a specific enum type.
 This version allows a subsetted range of the total enum to be used.</summary>
	<param name="x">[Enum] type</param>
	<param name="min">Lower end of enum range that is used in databinding</param>
	<param name="max">Upper end of enum range that is used in databinding</param>
</member><member name="P:ATLib.EnumAssistant.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG EnumAssistant(i)
 </summary>
	<param name="index">index in the range 0...EnumAssistant.count-1</param>
	<value>EnumItem object from EnumAssistant collection, at the indexed postion.</value>
</member><member name="M:ATLib.EnumAssistant.Add(ATLib.EnumItem)">
	<summary>
 Adds an EnumItem object to the EnumAssistant collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">EnumItem object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.EnumAssistant.Bind2Enum(System.Enum)">
	<summary>
 Converts the enum into a bindable object.
</summary>
	<param name="x">[Enum] type</param>
</member><member name="M:ATLib.EnumAssistant.Bind2Enum(System.Enum,System.Int32,System.Int32)">
	<summary>
 Converts the enum into a bindable object.
</summary>
	<param name="x">[Enum] type</param>
	<param name="min">Lower end of enum range that is used in databinding</param>
	<param name="max">Upper end of enum range that is used in databinding</param>
</member><member name="T:ATLib.EnumAssistant">
	<summary>
 This is a helper class that provides a binding helper for enums and other programmed lists.
 It gives the node content display and other enums something to bind with
 It emulates the behaviour of the other ATLib classes for databinding. See the example in the overloaded constructor
 New(x) for a demonstration of how the class is used.
 </summary>
</member><member name="P:ATLib.EnumItem.Name">
	<summary>Object Name. This is the name of the enum. If the optional description attribute is 
 used then this name is returned instead of the enum name
</summary>
	<returns>Enum value as integer</returns>
</member><member name="P:ATLib.EnumItem.Value">
	<summary>Object Value. This is the numeric value of the enum
</summary>
	<returns>Enum value as integer</returns>
</member><member name="P:ATLib.EnumItem.Description">
	<summary>Object Value. This is an alternative string value of the enum
</summary>
	<returns>Enum value as string</returns>
</member><member name="T:ATLib.EnumItem">
	<summary>
 The EnumItem are the bindable objects that are returned in the EnumAssistant class.
 </summary>
</member><member name="M:ATLib.InputValidator.Validatemm(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.Label)">
	<summary>
 Validates input value in form nnn.nnn and returns as value * 1000
 </summary>
	<param name="InputBox"></param>
	<param name="Errorlabel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Specs.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Specs(i)
 </summary>
	<param name="index">index in the range 0...Specs.count-1</param>
	<value>Spec object from Specs collection, at the indexed postion.</value>
</member><member name="M:ATLib.Specs.Add(ATLib.Spec)">
	<summary>
 Adds an Spec object to the Specs collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Spec object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Specs.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Specs.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Specs.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Specs.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Specs">
	<summary>
		<para>The Specs collection contains a set of Spec objects.
 </para>
	</summary>
</member><member name="M:ATLib.Spec.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
</member><member name="P:ATLib.Spec.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Spec.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Spec.AdID">
	<summary>
 Returns the ID of the user who placed the Spec
 </summary>
</member><member name="P:ATLib.Spec.SpecDefinitionID">
	<summary>
 Returns the ID of the classification that the Spec is in
 </summary>
</member><member name="P:ATLib.Spec.Ad">
	<summary>
 Returns the Ad object that the Spec is in
 </summary>
</member><member name="P:ATLib.Spec.IsActive">
	<summary>
 Defines whether the spec is active for the ad.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Spec.Name">
	<summary>
 Spec name, from data dictionary
 </summary>
</member><member name="P:ATLib.Spec.ValueList">
	<summary>
 Spec value list, from data dictionary
 </summary>
</member><member name="P:ATLib.Spec.DisplayType">
	<summary>
 Spec display type, from data dictionary
 </summary>
</member><member name="P:ATLib.Spec.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically Adnumberd boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Spec.Value">
	<summary>
 Value of Spec
 </summary>
</member><member name="P:ATLib.Spec.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Spec.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Spec.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Spec.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Spec.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Spec">
	<summary>
		<para> The Spec object holds all data retrieved from a specified row of the Spec table.
</para>
		<para>It is always accessed as part of the Specs collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Specs collection
  property of the parent. 
 </para>
	</summary>
</member><member name="E:ATLib.Timer.MinuteEvent">
	<summary>
 Fires every minute, on the minute
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.MidnightEvent">
	<summary>
 Fires at midnight
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.HourEvent">
	<summary>
 Fires every hour, on the hour
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.Preset1Event">
	<summary>
 Fires every day at the preset 1 time
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.Preset2Event">
	<summary>
 Fires every day at the preset 2 time
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.Interval1Event">
	<summary>
 Fires when each interval 1 is met
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="E:ATLib.Timer.Interval2Event">
	<summary>
 Fires when each interval 2 is met
 </summary>
	<param name="Timestamp">Exact date-time of event firing</param>
</member><member name="M:ATLib.Timer.#ctor">
	<summary>
 Instantiates a new timer object but does not start it ticking
 </summary>
</member><member name="P:ATLib.Timer.SynchronizingObject">
	<summary>
 This property allows a synchronizing object to be declared to the timer class so that
 events will fire on the sync object's thread rather than a separate timer thread.
 </summary>
</member><member name="P:ATLib.Timer.Preset1">
	<summary>
 Supplies a preset date target.
  Only hh:mm are used, so this property is accurate only to one minute. 
 The Preset1 event will be fired at
 the specified time every day when the preset time is met
 </summary>
</member><member name="P:ATLib.Timer.Preset2">
	<summary>
 Supplies a preset date target.
  Only hh:mm are used, so this property is accurate only to one minute. 
 The Preset2 event will be fired at
 the specified time every day when the preset time is met
 </summary>
</member><member name="P:ATLib.Timer.Interval1">
	<summary>
 Supplies a preset interval in seconds.
 The Interval1 event will be fired repeatedly each time the interval is met.
 </summary>
</member><member name="P:ATLib.Timer.Interval2">
	<summary>
 Supplies a preset interval in seconds.
 The Interval2 event will be fired repeatedly each time the interval is met.
 </summary>
</member><member name="M:ATLib.Timer.StartTimer">
	<summary>
 Starts the timer running
 </summary>
</member><member name="M:ATLib.Timer.StopTimer">
	<summary>
 Stops the timer
 </summary>
</member><member name="T:ATLib.Timer">
	<summary>
 The Timer class generates Timer events at various points. A basic one second
 loop  is split out into several different events. This class uses the
 system.timers.timer object to generate  a basic 1 second tick, and looks at the
 curent system time (now) to determine time intervals etc Note that this does not
 call System.dbtime, since thats an IO call. Therefore the time generated by
 this  class may may differ from the db time. 
 <para></para>
		<para>Timer publishes events through 4 events - any process can subscribe to
 these events by declaring an event handler.</para>
	</summary>
</member><member name="T:ATLib.Loader.ASPX">
	<summary>
 This is a numeric list of ASPX pages which are translated by the Loader into a string page description, which is ultimately incorporated into a URL.
 These values are incorporated into the Loader QueryString as the NextASPX and Referrer fields.</summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Loader.menuMask">
	<summary>
 Defines a bitmap of buttons in the top menu. Passed to client side javascript and used to control which buttons are in an up, down or disabled state.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Loader.#ctor">
	<summary>
 Instantiates the object and sets up the 4 embedded frames.
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Loader.#ctor(System.String)">
	<summary>
 Instantiates the loader and provides it with the incoming query string.
 </summary>
	<param name="QS">72 character encoded querystring.</param>
	<example>
 dim Loader as New Loader(Request.QueryStrings(0))
</example>
</member><member name="P:ATLib.Loader.ApplicationPath">
	<summary>
 Sets or gets the applicatinj path. Normally there's no need to ever set it since
 the call to getappliationpath will do this. Email and inhapps however do need to 
 explcitly set it to either the internal or extenal address
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Loader.Referrer">
	<summary>
 Returns the Loader.ASPX id of the referring page - ie the page that caused the current
 page to be displayed.
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.ThisASPX">
	<summary>
 Returns the Loader.ASPX id of the referring page - ie the page that caused the current
 page to be displayed.
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.SelectedTab">
	<summary>
 Defines the currently selected tab. On set, this specifies which tab is to be highlighted
 when the page is displayed. On get, provides server side code with the id of the tab that was clicked.
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.ObjectID">
	<summary>
 Object ID of the current obect, as specified by the ObjectType property.
 </summary>
</member><member name="P:ATLib.Loader.ObjectType">
	<summary>
 ObjectType, from one of ATSystem.ObjectTypes, which qualifies teh 
  ObjectID property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Loader.Param1">
	<summary>
Optional parameter, used typically to provide a second objectID, when two are required. 
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.ASPXName">
	<summary>
 The current page ASPX, returned as a string value representing the real ASPX page name
 </summary>
</member><member name="P:ATLib.Loader.NextASPX">
	<summary>
 The ASPX field is the ASPX page to load on the next incoming browser request. If its not set by the caller,
  or its set to Loader.ASPX.Null,  then it means that the page in this frame should not be replaced on the next delivery from 
 server to client
 </summary>
</member><member name="P:ATLib.Loader.NextASPXName">
	<summary>
 The current next page ASPX, returned as a string value representing the real ASPX page name
 </summary>
</member><member name="P:ATLib.Loader.Target">
	<summary>
 returns the URL for this frame frame
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.ShortTarget">
	<summary>
 returns the short URL consisting of just the objectid
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.ParamLessTarget">
	<summary>
 returns a parameterless URL with no QS
 </summary>
	<value></value>
</member><member name="P:ATLib.Loader.QueryString">
	<summary>
 Returns the querystring
 </summary>
</member><member name="P:ATLib.Loader.SlotID">
	<summary>
 SlotID of the current slot object for this session
 </summary>
</member><member name="M:ATLib.Loader.Copy">
	<summary>
 Returns a copy of the curent loader
 this is used for calls that will destroy the loader contents
 eg passing loader as a parameter really only passes the pointer
 so this is a mechanism for passing a disposable copy
 </summary>
	<returns>Copy of loader as new object</returns>
	<example>
 dim myLoader As Loader = yourLoader.Copy
 </example>
</member><member name="T:ATLib.Loader">
	<summary>
 The loader class is used to propate state information between server and client,
 and serves as the primary dispatch mechanism for driving the user to the correcf
 ASPX page and tab, and with the correct object context. 
 <para></para>
		<para>The loader packs a structure of 32 bit integer values into a set of nine 8
 byte hex strings, and then transfers that data between browser and server as the
 querystring.  The loader data structure is: </para>
		<para></para>
		<para></para>
		<code>Name		Symbol		Type			Hex bytes
 NextASPX		(X)		Loader.ASPX		XXXXXXXX
 Referrer		(R)		Loader.ASPX		RRRRRRRR
 SlotID		(S)		Integer			SSSSSSSS
 SelectedTab	(N)		integer			NNNNNNNN
 ObjectType	(T)		Integer			TTTTTTTT
 ObjectID		(O)		Integer			OOOOOOOO
 Param1		(P)		Integer			PPPPPPPP</code>
		<para></para>
		<para></para>
		<para>In addition, the NextASPX value maps to an aspx page name, to yield a URL
 for each target frame as follows:</para>
		<para></para>
		<para>pagename.aspx?XXXXXXXXRRRRRRRRSSSSSSSSFFFFFFFFLLLLLLLLNNNNNNNNTTTTTTTTOOOOOOOOPPPPPPPP</para>
		<para></para>
		<para>There are four frames in the system - three inline frames and a popup used
 for documentation and other transient information. The final loader URL packs
 each of the frame-specific URLS into a combined sting which becomes a
 client-side javascript call to the top level parent page which then requests the
 server to load each of the four frames with the specified content encoded in the
 frame-specific query string, as follows:</para>
		<para></para>
		<para>javascript:parent.load(menu,tree,content)</para>
		<para></para>
		<para>Any or all four frames can be transmitted from server to broswer client by
 this single call to parent.load.</para>
		<para></para>
		<para>The loader embeds these four frames as loader.Menu, loader.BFrame,
 loader.CFrame and loader.Popup. Most of the activity takes place in the BFrame
 (typically used as the left hand icon menu) and the CFrame (typically used as
 the main content panel.) To facilitate this, when the query string is supplied
 into the loader on an incoming request from the browser, the loader, uses a
 synonym name of "this" for either the BFrame or CFrame. Hence
 Loader.this refers to a request for the current incoming frame data, which might
 be either the BFrame or CFrame.</para>
		<para></para>
		<para>The loader therefore acts as a translator between the querystring form and
 the individual integer fields. Most of the properties of the loader therefore
 provide a simple mechanism for supplying information into the loader and
 extracting information from it.</para>
	</summary>
</member><member name="P:ATLib.Usrs.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Usrs(i)
 </summary>
	<param name="index">index in the range 0...usrs.count-1</param>
	<value>Usr object from Usrs collection, at the indexed postion.</value>
</member><member name="M:ATLib.Usrs.Add(ATLib.Usr)">
	<summary>
 Adds a Usr object to the Usrs collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Usr object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Usrs.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Usrs.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Usrs.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Usrs.GetAliasList(System.String)">
	<summary>
 returns the list of aliases
 </summary>
	<param name="Key"></param>
	<remarks></remarks>
</member><member name="M:ATLib.Usrs.RetrieveByEmailAddr(System.String)">
	<summary>
 Retrieves the user specified by the login name. Login Name has system-wide scope
 so only one user or maybe no user is retrieved by this call. The success of the call 
 can be tested by the Usrs.Count property.
 </summary>
	<param name="EmailAddr">login name for user to retrieve.</param>
</member><member name="M:ATLib.Usrs.RetrieveByAcctAlias(System.String)">
	<summary>
 Retrieves the user specified by the login name. Login Name has system-wide scope
 so only one user or maybe no user is retrieved by this call. The success of the call 
 can be tested by the Usrs.Count property.
 </summary>
	<param name="AcctAlias">Account Alias.</param>
</member><member name="M:ATLib.Usrs.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Usrs">
	<summary>
		<para>The Usrs Collection is used to hold the set of Usr
 objects which are retrieved from the database by any of the overloaded Retrieve
 methods. The collection is normally accessed by using the Usrs property of the parent System object. This class manages the Usr database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="T:ATLib.Usr.LoginLevels">
	<summary> Defines the login authority level of the user. Note that
 the precedence should follow the authority hierarchy, as the application code
 inludes statements such as if usr.loginlevel &gt; loginlevels.company... which
 would select dealer, super user and sysadmin</summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Usr.UAMs">
	<summary>
 UAMs (User Authority Mask) is a set of 32 bits which further qualifies the user's login level, to more granularly define what types of operations he can do. The UAM field in the user object is 
 constracted as the OR of these bits. Individual bits can be tested within the UAM by ANDing the bit calue with the contents of the UAM.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Usr.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Usr.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Usr.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Usr.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Usr.EmailAddr">
	<summary>Object EmailAddr. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Usr.FName">
	<summary>
 Specifies the user first name.
 </summary>
</member><member name="P:ATLib.Usr.LName">
	<summary>
 Specifies the user last name.
 </summary>
</member><member name="P:ATLib.Usr.Addr1">
	<summary>
 Specifies the user address line 1.
 </summary>
</member><member name="P:ATLib.Usr.Addr2">
	<summary>
 Specifies the user address line 2.
 </summary>
</member><member name="P:ATLib.Usr.Suburb">
	<summary>
 Specifies the user address line 2.
 </summary>
</member><member name="P:ATLib.Usr.State">
	<summary>
 Specifies the user address line 2.
 </summary>
</member><member name="P:ATLib.Usr.Postcode">
	<summary>
 Specifies the user address line 2.
 </summary>
</member><member name="P:ATLib.Usr.Countrycode">
	<summary>
 Specifies the user address line 2.
 </summary>
</member><member name="P:ATLib.Usr.Country">
	<summary>
 Returns the full country name via ea
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Usr.Company">
	<summary>
 Company
 </summary>
</member><member name="P:ATLib.Usr.ACN">
	<summary>
 Company
 </summary>
</member><member name="P:ATLib.Usr.AcctAlias">
	<summary>
 Company
 </summary>
</member><member name="P:ATLib.Usr.Phone">
	<summary>
 Phone
 </summary>
</member><member name="P:ATLib.Usr.AHPhone">
	<summary>
 AHPhone
 </summary>
</member><member name="P:ATLib.Usr.Mobile">
	<summary>
 Mobile
 </summary>
</member><member name="P:ATLib.Usr.Fax">
	<summary>
 Company
 </summary>
</member><member name="P:ATLib.Usr.Skin">
	<summary>
 Site skin, as chosen by this user
 </summary>
</member><member name="P:ATLib.Usr.WebSite">
	<summary>
 web site
 </summary>
</member><member name="P:ATLib.Usr.Discount">
	<summary>
 web site
 </summary>
</member><member name="P:ATLib.Usr.IsGSTExempt">
	<summary>
 Defines whether user is gst exempt.
 </summary>
</member><member name="P:ATLib.Usr.FullName">
	<summary>
 Returns the full user name
 that the user is marked as the reference user.
 </summary>
	<value>Name like Fred or Fred (Ref)</value>
</member><member name="P:ATLib.Usr.VisibleFullName">
	<summary>
 Returns the full user name, qualified by whether the fname and lname are  required
 that the user is marked as the reference user.
 </summary>
	<value>Name like Fred or Fred (Ref)</value>
</member><member name="P:ATLib.Usr.HTMLAddress">
	<summary>
 Returns the full user name formatted for HTML
 that the user is marked as the reference user.
 </summary>
	<value>Name like Fred or Fred (Ref)</value>
</member><member name="P:ATLib.Usr.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Usr.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Usr.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Usr.Password">
	<summary>
 Specifies the user's password.
 </summary>
</member><member name="P:ATLib.Usr.Ads">
	<summary>
 Returns a collection of ad objects, representing all of the ads
 which have been placed by this user.
 </summary>
	<value>Collection of ad objects subordinate to the parent User</value>
</member><member name="P:ATLib.Usr.Ads(ATLib.Ad.ProdnState)">
	<summary>
 Returns a collection of order objects, representing all of the orders
 which have been placed FOR this user, which are in the prodnstatus range, and qualified by the filter parameter.
 </summary>
	<value>Collection of Order objects subordinate to the parent User,
 qualified by the Filter param</value>
	<param name="ProdnStatus">specifies the production status</param>
</member><member name="P:ATLib.Usr.AdInstances(System.Int32,System.Int32)">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Usr.UAM">
	<summary>
 The UAM is a 32 bit boolean mask implemented as an integer. This property
 further qualifies the user's login level, by providing up to 32 separate tests that can be made
 to determine what he can do.
 </summary>
</member><member name="P:ATLib.Usr.LoginLevel">
	<summary>
 Specifies the login authority of the user.
 </summary>
</member><member name="P:ATLib.Usr.EditionVisibility">
	<summary>
 Specifies the login authority of the user.
 </summary>
</member><member name="P:ATLib.Usr.LoginLevelDescr">
	<summary>
 Returns a human readable string description of the login level property in a form suitable for databinding.
 </summary>
</member><member name="P:ATLib.Usr.SystemID">
	<summary>Parent SystemID to which this object is subordinate, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Usr.System">
	<summary>
 The System object which owns this user.
 </summary>
	<value></value>
</member><member name="P:ATLib.Usr.Slots">
	<summary>
 Embedded collection of slots, representing all of the (unpurged) login sessions that this user has executed.
 </summary>
	<value></value>
</member><member name="P:ATLib.Usr.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Usr.IsEmailAddrUnique(System.String)">
	<summary> Checks that the name is unique for a parent within the current
 hierarchy scope. This can differ for different objects. See remarks below
 Returns true if the name is unique, false if it exists wtihin the
 scope</summary>
	<remarks>The scope of uniqueness for the user object is system-wide. That is,
 this test enforces the rule that each user must have a unique name, irrespective
 of what dealer-System-company the user has been created for. From an
 implementation perspective the easiest way of ensuring this is by requiring that
 user names are email addresses, but this rule is not implemented here.</remarks>
	<param name="EmailAddr">The name to check</param>
	<returns>True if the name is unique, false otherwise</returns>
</member><member name="M:ATLib.Usr.DeleteAds">
	<summary>
 Deletes all the ads for the user
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Usr.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Usr.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Usr">
	<summary>
		<para> The Usr object holds all data retrieved from a specified row of the Usr table.
</para>
		<para>It is always accessed as part of the Usrs collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Usrs collection
  property of the parent. 
 </para>
	</summary>
</member><member name="P:ATLib.Categories.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Categorys(i)
 </summary>
	<param name="index">index in the range 0...Categorys.count-1</param>
	<value>Category object from Categorys collection, at the indexed postion.</value>
</member><member name="M:ATLib.Categories.Add(ATLib.Category)">
	<summary>
 Adds a Category object to the Categorys collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Category object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Categories.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Categories.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Categories.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Categories.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Categories">
	<summary>
 The Categorys class implements a collection of Category objects, which are directly subordinate
 to the System object. System Colors provide a single system wide reference of all spot colors that can be defined
 in inks, foils and paper. System Colors are maintained in the RGB color space.
 </summary>
</member><member name="M:ATLib.Category.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Category.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Category.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Category.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Category.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Category.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Category.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Category.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Category.SortKey">
	<summary>
 Defines the sort sequence of colors in the collection. This is used because VComp requires that
 foils in particular are enumerated in a user-definable order.
 </summary>
</member><member name="P:ATLib.Category.System">
	<summary>
 Parent system object, to which the Categorys are subordinate
 </summary>
	<value></value>
</member><member name="P:ATLib.Category.Classifications">
	<summary>Embedded collection of Classification objects. Holds all classifications in the Category</summary>
	<value>Collection of Ad objects in the Category</value>
</member><member name="P:ATLib.Category.systemID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Category.IncludeInBar">
	<summary>
 Defines whether the ad is enabled or disabled.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Category.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Category.IsNameUnique(System.String)">
	<summary>
 Checks that the supplied name is unique within the scope of the color type, paper, ink or foil.
 </summary>
	<param name="Name">Nzme to test for uniqueness</param>
	<returns>True if name is unique within scope, false otherise.</returns>
</member><member name="M:ATLib.Category.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.Category">
	<summary>
		<para> The Category object holds all data retrieved from a specified row of the Category table.
</para>
		<para>It is always accessed as part of the Categorys collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Categorys collection
  property of the parent. 
 </para>
	</summary>
</member><member name="M:ATLib.EmailAssistant.SendRegistrationWelcome(ATLib.Usr)">
	<summary>
 Sends a welcome registration page to user
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendPassword(ATLib.Usr)">
	<summary>
 Sends a forgot password to the user with his password
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendSubsRequest(ATLib.Usr,System.String)">
	<summary>
 Sends an email to admin saying what the user wants
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendEditionCLoseReminder(ATLib.Usr,ATLib.Ad)">
	<summary>
 Sends an email to usr saying edition is about to close
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendAdConfirmation(ATLib.Ad)">
	<summary>
 Sends a confirmation of the ad booking
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendProofApprovalRQ(ATLib.Ad)">
	<summary>
 Sends a proof approval request to the customer who placed the ad
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.SendProdnNote(ATLib.Ad)">
	<summary>
 Sends the prodn note to prodn staff at at
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.EmailAssistant.GetContent(System.String)">
	<summary>
 This function can be used to scrape a page from a web site. The page is returned as an HTML string.
 </summary>
	<param name="URL">fully qualified URL of the site from which the page will be scraped.</param>
	<returns>HTML page data as as string</returns>
</member><member name="M:ATLib.EmailAssistant.Send(System.String,System.String,System.String[],System.String[],System.String[],System.String)">
	<summary>
 Sends the email content defined in Body to the repients.
 </summary>
	<param name="Body">HTML string which forms the email body</param>
	<param name="from">Email from field</param>
	<param name="recipient">String array of email addresses which will form the TO field</param>
	<param name="bcc">String array of email addresses which will form the BCC field</param>
	<param name="cc">String array of email addresses which will form the CC field</param>
	<param name="subject">Subject line</param>
</member><member name="T:ATLib.EmailAssistant">
	<summary>
 This class provides email services for the formatting and transmission of emails. In the current implementatation,
 EmailAssistant works by scraping the requested page from the web application into memory as an HTML
 string, and then transmits that string via the SMTP server.
 </summary>
</member><member name="M:ATLib.Images.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Images.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Images(i)
 </summary>
	<param name="index">index in the range 0...Images.count-1</param>
	<value>Image object from Images collection, at the indexed postion.</value>
</member><member name="M:ATLib.Images.Add(ATLib.Image)">
	<summary>
 Adds a Image object to the Images collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Image object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Images.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Images.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Images.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Images.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Images">
	<summary>
		<para>The Images collection contains a set of Image objects. Each Image object represents
 an invocation of a Ad wihin a particular order, It therefore implemens a M:M relationship
  between the Order object and the Ad object.
 </para>
	</summary>
</member><member name="T:ATLib.Image.ProdnState">
	<summary>
 Defines the production status that a Image can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Image.ImageTypes">
	<summary>
 Defines the uploadable image types that are acceptable to the system.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Image.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Image.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Image.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Image.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Image.OriginalSourcePath">
	<summary>
 Absolute path of source image. Not written to  db, but used to derive sourceFileName
 </summary>
</member><member name="P:ATLib.Image.WorkingSourcePath">
	<summary>
 Absolute path of source image. Not written to  db, but used to derive sourceFileName
 </summary>
</member><member name="P:ATLib.Image.PhysicalApplicationPath">
	<summary>
 Fully qualified path to the web application. This field
 is normally plugged by a call to Server.MapPath(Request.ApplicationPath), and is used as a property in databinding
 </summary>
</member><member name="P:ATLib.Image.PreviewSequence">
	<summary>Preview Sequence - used to generate unique preview filenames</summary>
	<value>PreviewSequence as an integer</value>
</member><member name="P:ATLib.Image.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Image.IsWebEnabled">
	<summary>
 Defines whether the object can be viewed on the web site.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Image.IsCheckedOut">
	<summary>
 Defines whether the object is checked out.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Image.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Image.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Image.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Image.SetMainImage">
	<summary>
 makes this image the main image for the ad
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Image.GenerateSubsample(System.String,System.String,System.Int32)">
	<summary>
 Generates a low res subsample with the supplied name into a fixed height, variable width 
 </summary>
	<param name="Height"></param>
	<remarks>http://dotnetslackers.com/articles/aspnet/Generating-Image-Thumbnails-in-ASP-NET.aspx</remarks>
</member><member name="M:ATLib.Image.getTifPreview(System.String)">
	<summary>
 Attempts to generate a valid TIFF preview from the supplied EPS filename. The preview is extracted from 
 the TIFF preview within the EPS file. If no preview exists, a proforma EPS preview is returned instead.
 </summary>
	<param name="EPSfile"></param>
	<returns>TIF preview in system bitmap format</returns>
</member><member name="M:ATLib.Image.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Image.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Image">
	<summary>
		<para> The Image object holds all data retrieved from a specified row of the Image table.
</para>
		<para> It is always accessed as part of the Dcos collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Images collection
  property of the parent. 
 </para>
	</summary>
</member><member name="M:ATLib.RateTable.ImportClassadRates(System.String,System.String)">
	<summary>
 Imports the data from the supplied excel spreadsheet into memory based tables
 </summary>
	<param name="filename"></param>
	<param name="sheetname"></param>
	<remarks></remarks>
</member><member name="M:ATLib.RateTable.ImportDisplayRates(System.String,System.String)">
	<summary>
 Imports the data from the supplied excel spreadsheet into memory based tables
 </summary>
	<param name="filename"></param>
	<param name="sheetname"></param>
	<remarks></remarks>
</member><member name="M:ATLib.RateTable.ExportClassadRates(System.String)">
	<summary>
 Exports the classad table to a rectangular array of numeric cells in the SQL database
 </summary>
	<param name="Tablename"></param>
	<remarks></remarks>
</member><member name="M:ATLib.RateTable.ExportDisplayRates(System.String)">
	<summary>
 Exports the display tables to a rectangular array of numeric cells in the SQL database
 </summary>
	<param name="Tablename"></param>
	<remarks></remarks>
</member><member name="M:ATLib.RateTable.LoadClassadTable(System.String)">
	<summary>
 Reads the entire display table and loads the 4 in memory arrays
 </summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:ATLib.RateTable.LoadDisplayTable(System.String)">
	<summary>
 Reads the entire display table and loads the 4 in memory arrays
 </summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="P:ATLib.Slots.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Slots(i)
 </summary>
	<param name="index">index in the range 0...slots.count-1</param>
	<value>Slot object from Slots collection, at the indexed postion.</value>
</member><member name="M:ATLib.Slots.Add(ATLib.Slot)">
	<summary>
 Adds a Slot object to the Slots collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Slot object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Slots.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Slots.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Slots.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Slots.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="M:ATLib.Slots.Purge(System.Int32)">
	<summary>
 Deletes slots whose last activity is less than the supplied purge days
 returns the number of slots affected
 </summary>
	<param name="days">Number of days to retain slots before purging</param>
	<returns>Number of slots that have been purged.</returns>
</member><member name="T:ATLib.Slots">
	<summary>
 The Slots class implements a collection of Slot objects. A new slot object is
 created for each user login  and is used to track session state by an associated
 database record. The SlotID is one of the primary properties that is
 incorporated in the Loader object, and is passed as part of the loader data
 structure between host and client via the Querystring. 
 <para></para>
		<para>The slot object for a session is normally accessed directly once the
 loader is known. The collectio of slots for any user can also be found through
 the Usr. Slots property of the Usr object. The following code shows how the slot
 is retrieved from the request.querystring, via the loader object</para>
		<para></para>
	</summary>
</member><member name="T:ATLib.Slot.LoginStates">
	<summary>
 Defines the state that a slot can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Slot.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Slot.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Slot.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Slot.FName">
	<summary>
 User's first name
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.LName">
	<summary>
 User's last name
 </summary>
</member><member name="P:ATLib.Slot.EmailAddr">
	<summary>
 User's email addr
 </summary>
</member><member name="P:ATLib.Slot.TreeTop">
	<summary>
 Uses the user login level to return a small TreeTop object which identifies startup
 parameters for the system immediately after login. This property is used by the system start pages
 to slot the user into the home page tree structure according to his login level.
 </summary>
	<value>Loader object which specifies the start conditions for the supplied frame.</value>
</member><member name="P:ATLib.Slot.SessionID">
	<summary>
 SesisonID, from .Net. This is used to detect if the user is trying to re-enter
 a session from a bookmark
 </summary>
	<value>SessionID</value>
</member><member name="P:ATLib.Slot.Skin">
	<summary>
 Skin - current site skin as perceived by this slot
 </summary>
	<value>SessionID</value>
</member><member name="P:ATLib.Slot.StrParam1">
	<summary>
 StrParam1 - provides a session based mechanism to pass wtring fields between pages
 a session from a bookmark
 </summary>
	<value>SessionID</value>
</member><member name="P:ATLib.Slot.SearchMode">
	<summary>
 SearchMode - defines whether the slot is browsing, keyword searching or full text searching
 </summary>
	<value>SearchMode</value>
</member><member name="P:ATLib.Slot.SearchObjectType">
	<summary>
 SearchObjectType - defines whether the search is for categories or classifications
 </summary>
	<value>SearchObjectType</value>
</member><member name="P:ATLib.Slot.SearchObjectID">
	<summary>
 SearchObjectID - either a class or category id, consistentent with searchObjectType
 </summary>
	<value>SearchObjectID</value>
</member><member name="P:ATLib.Slot.ProofObjectType">
	<summary>
 ProofObjectType - Used for filtering results in Proof Reader
 </summary>
</member><member name="P:ATLib.Slot.ProofObjectID">
	<summary>
 ProofObjectID - Used for filtering results in Proof Reader
 </summary>
</member><member name="P:ATLib.Slot.SearchKey">
	<summary>SearhKey - what the user asks to search from
 </summary>
	<value>SearchKey</value>
</member><member name="P:ATLib.Slot.UAM">
	<summary>
 The UAM is a 32 bit boolean mask implemented as an integer. The bit definitions are identified in the Usr.UAMS. This property
 further qualifies the user's login level, by providing up to 32 separate tests that can be made
 to determine what he can do. The UAM is defined in the Usr object and is returned in the slot object
 as a joined field from the user.
 </summary>
</member><member name="P:ATLib.Slot.LoginLevel">
	<summary>
 User login level, returned as a joined field from the user.
 </summary>
</member><member name="P:ATLib.Slot.LoginStatus">
	<summary>
 Slot loginStatus, which identifies whether the slot is operational, logged out, or has been timed out.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.EditionVisibility">
	<summary>
 Slot Edition Visibility, copied from Usr object.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.IPAddr">
	<summary>
 IP address of the browser client from where the user logged in
 </summary>
</member><member name="P:ATLib.Slot.UsrID">
	<summary>
 ID of the Usr object which owns this slot.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.ImpersonateUsrID">
	<summary>
 ID of the Usr object which is being impersonated
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.AliasIDFilter">
	<summary>
 ID of usr alias for proof filtering of ads.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.AdSortOrder">
	<summary>
 Determines order of retrieved ads for proof reader.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.UserTypeFilter">
	<summary>
 Determines user type displayed in user listing.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Slot.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Slot.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="P:ATLib.Slot.Usr">
	<summary>
 Usr Object which owns this slot.
 </summary>
	<value></value>
</member><member name="P:ATLib.Slot.ImpersonatedUsr">
	<summary>
 Usr Object which owns this slot.
 </summary>
	<value></value>
</member><member name="M:ATLib.Slot.Login(System.String,System.String)">
	<summary>
 This function performs user login validation and if successful creates a new slot object.
 The function return value indicates whether a slot record was written, and if so, its ID will be
 supplied through the ID property.
 </summary>
	<param name="EmailAddr">User login name</param>
	<param name="Password">User password</param>
	<returns>Result of login attempt.</returns>
</member><member name="M:ATLib.Slot.Logout">
	<summary>
 Logs the user out by setting the slot state to logout.
 </summary>
</member><member name="M:ATLib.Slot.Terminate(ATLib.Slot.LoginStates)">
	<summary>
 This method is available to forceably terminate the slot.
 </summary>
	<param name="value"></param>
</member><member name="M:ATLib.Slot.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Slot.Touch">
	<summary>
 Touches the slot modify timestamp, used to control slot timeout
 </summary>
</member><member name="T:ATLib.Slot">
	<summary>
		<para> The Slot object holds all data retrieved from a specified row of the Slot table.
</para>
		<para> It is always accessed as part of the Slots collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Slots collection
  property of the parent Usr object. 
 </para>
	</summary>
</member><member name="P:ATLib.Publications.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Publications(i)
 </summary>
	<param name="index">index in the range 0...Publications.count-1</param>
	<value>Publication object from Publications collection, at the indexed postion.</value>
</member><member name="M:ATLib.Publications.Add(ATLib.Publication)">
	<summary>
 Adds a Publication object to the Publications collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Publication object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Publications.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Publications.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Publications.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Publications.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Publications">
	<summary>
		<para>The Publications collection is used to hold the set of Publication
 objects. The collection is normally accessed by using the Publications property of the parent System object.
  This class manages the Publication database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="M:ATLib.Publication.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Publication.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Publication.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Publication.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Publication.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Publication.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Publication.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Publication.NavTarget2">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Publication.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Publication.Description">
	<summary>Description</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Publication.SortKey">
	<summary>Sort Key</summary>
	<returns>Sort Key</returns>
</member><member name="P:ATLib.Publication.Type">
	<summary>
 Defines the type of publication
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Publication.System">
	<summary>
 Embedded system object, to which this Publication is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Publication.SystemID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Publication.Products">
	<summary>Embedded collection of product objects.</summary>
	<returns>Returns collection of categories subordinate to the publication whose status is as requested</returns>
</member><member name="P:ATLib.Publication.Editions">
	<summary>Embedded collection of edition objects.</summary>
	<returns>Returns collection of editions subordinate to the publication whose status is as requested</returns>
</member><member name="P:ATLib.Publication.FirstOpenEdition">
	<summary>
 Returns the first open edition of the publication
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Publication.Editions(ATLib.Edition.ProdnState)">
	<summary>Embedded collection of edition objects.</summary>
	<param name="ProdnStatus">edition status</param>
	<returns>Returns collection of editions subordinate to the publication whose status is as requested</returns>
</member><member name="P:ATLib.Publication.FeaturedAds(ATLib.Edition.VisibleState)">
	<summary>
 featured ads
 </summary>
	<value></value>
</member><member name="P:ATLib.Publication.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Publication.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Publication.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Publication">
	<summary>
		<para> The Publication object holds all data retrieved from a specified row of the Publication table.
</para> It is always accessed as part of the Publications collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Publications collection
  property of the parent. 
 </summary>
</member><member name="P:ATLib.Ads.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Ads(i)
 </summary>
	<param name="index">index in the range 0...Ads.count-1</param>
	<value>Ad object from Ads collection, at the indexed postion.</value>
</member><member name="M:ATLib.Ads.Add(ATLib.Ad)">
	<summary>
 Adds an Ad object to the Ads collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Ad object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Ads.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Ads.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Ads.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Ads.RetrieveByNumber(System.String)">
	<summary>Retrieves the ad with the supplied ad number</summary>
</member><member name="M:ATLib.Ads.RetrieveBillSet">
	<summary>Retrieves the ads with billing status=ready</summary>
</member><member name="M:ATLib.Ads.ClearBillSet">
	<summary>Sets ad billing status to not ready where status=ready</summary>
</member><member name="M:ATLib.Ads.GetAdCount(ATLib.ATSystem.ObjectTypes,System.Int32)">
	<summary>
 Returns the total number of ads according the the object type and ID passed
 </summary>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Ads.DeleteSet(ATLib.ATSystem.ObjectTypes,System.Int32)">
	<summary>
 Deletes all the ads associated with the object type
 </summary>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<remarks></remarks>
</member><member name="M:ATLib.Ads.Purge">
	<summary>
 Called by Timer Services. Deletes all ads which have a status of Initial - called at Midnight. 
 We hope someone is not placing an ad at midnight.
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ads.Archive">
	<summary>
 Called by Timer Services. Sets the ad status to archive if all the instances are for past
 editions - ie edn.visiblestate=past. 
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ads.KillLatestListings">
	<summary>
 Called by timer services. resets the lastest listing flag on all ads
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ads.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Ads">
	<summary>
		<para>The Ads collection contains a set of Ad objects.
 </para>
	</summary>
</member><member name="T:ATLib.Ad.PaymentTypes">
	<summary>
 Defines how the order is being paid for.
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Ad.SortOrders">
	<summary>
 Defines how ads are sorted (in proof editor)
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Ad.ProdnState">
	<summary>
 Defines the production status that an Ad can be in
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Ad.BillState">
	<summary>
 Defines the billing state that an Ad can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Ad.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
</member><member name="P:ATLib.Ad.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Ad.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Ad.Adnumber">
	<summary>
 Ad number in the form YYYY.MM.NNNN.
 </summary>
	<value>Ad Adnumber (ID value)</value>
</member><member name="P:ATLib.Ad.IsPDFHint">
	<summary>
 Defines a pdf hint to show pdf form on tweeted ads and featured ads.
 </summary>
</member><member name="P:ATLib.Ad.UsrID">
	<summary>
 Returns the ID of the user who placed the Ad
 </summary>
</member><member name="P:ATLib.Ad.Usr">
	<summary>
 Returns the usr object for the user who placed the Ad
 </summary>
</member><member name="P:ATLib.Ad.ClickCount">
	<summary>
 Returns the number of times that the ad has been clicked
 </summary>
</member><member name="P:ATLib.Ad.FolderID">
	<summary>
 Returns the ID of the folder that the ad is in
 </summary>
</member><member name="P:ATLib.Ad.Folder">
	<summary>
 Returns the folder object that the ad is in
 </summary>
</member><member name="P:ATLib.Ad.ClassificationID">
	<summary>
 Returns the ID of the classification that the ad is in
 </summary>
</member><member name="P:ATLib.Ad.Classification">
	<summary>
 Returns the Classfication object that the ad is in
 </summary>
</member><member name="P:ATLib.Ad.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically Adnumberd boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Ad.ProdnStatus">
	<summary>
 Specifies the Production status of the Ad
 </summary>
</member><member name="P:ATLib.Ad.BillStatus">
	<summary>
 Specifies the Billing status of the Ad
 </summary>
</member><member name="P:ATLib.Ad.ProdnStatusDescr">
	<summary>
 Returns the production status, as a human readable string.
 </summary>
</member><member name="P:ATLib.Ad.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Ad.NavTarget2">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Ad.BindingParam1">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 any string suitable for binding to controls. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Ad.KeyWords">
	<summary>
 First few words of ad - for bold display in classifieds
 </summary>
</member><member name="P:ATLib.Ad.Summary">
	<summary>
 Summary of ad - appears in listings
 </summary>
</member><member name="P:ATLib.Ad.SortKey">
	<summary>
 sort key - normally derived from first word by GenerateSortKey but can be plugged manually
 </summary>
</member><member name="P:ATLib.Ad.Text">
	<summary>
 Text of ad
 </summary>
</member><member name="P:ATLib.Ad.PhysicalApplicationPath">
	<summary>
 Fully qualified path to the web application. This field
 is normally plugged by a call to Server.MapPath(Request.ApplicationPath), and is used as a property in databinding
 </summary>
</member><member name="P:ATLib.Ad.TrimmedText">
	<summary>
 Searches for first or second separator character and if found returns the second and or third parts of the string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.OriginalText">
	<summary>
 Text of ad
 </summary>
</member><member name="P:ATLib.Ad.ItemPrice">
	<summary>
 Price of the item being advertised
 </summary>
</member><member name="P:ATLib.Ad.YoutubeVideoTag">
	<summary>
 You tube video tage
 </summary>
</member><member name="P:ATLib.Ad.ProdnRequest">
	<summary>
 Prodn Note - special production instructions
 </summary>
</member><member name="P:ATLib.Ad.ProdnResponse">
	<summary>
 Prodn feedback - special production feedback
     ''' </summary>
</member><member name="P:ATLib.Ad.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Ad.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Ad.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="P:ATLib.Ad.THBURL">
	<summary>
 Returns the thb url if a main image exists, otherwise the default url
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.LoResURL">
	<summary>
 Returns the lores url if a main image exists, otherwise the default url
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.Images">
	<summary>
 Embedded collection of Image objects, which are assoicated with this Ad, and which are in the
  supplied production status range.   
  The collection is filtered on Imageument Adnumber by the value of the filter parameter.
The collection is sorted by the supplied property in the supplied Ad 
 </summary>
</member><member name="P:ATLib.Ad.WebImages">
	<summary>
 Embedded collection of Image objects, which are assoicated with this Ad, and which are in the
  supplied production status range.   
  The collection is filtered on Imageument Adnumber by the value of the filter parameter.
The collection is sorted by the supplied property in the supplied Ad 
 </summary>
</member><member name="P:ATLib.Ad.Instances">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Ad.PublicationInstances(System.Int32)">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Ad.EditionInstances(System.Int32)">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Ad.ProductInstances(System.Int32)">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Ad.ProductEditionInstances(System.Int32,System.Int32)">
	<summary>
 Embedded collection of Ad Instance objects, which are assoicated with this Ad
 </summary>
</member><member name="P:ATLib.Ad.MainImage">
	<summary>
 Main image object in the supplied Ad 
 </summary>
</member><member name="P:ATLib.Ad.Specs">
	<summary>
 returns all the specs for the ad
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.Specs(System.Int32)">
	<summary>
 retrieves the set of specs for the ad which are in a particular group, if supplied,
 otherwise retrieves all the specs for the ad
 </summary>
	<param name="SpecGroupID">groupid</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.ActiveSpecs">
	<summary>
 returns all the specs for the ad
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Ad.ActiveSpecs(System.Int32)">
	<summary>
 Embedded collection of spec objects, which are assoicated with this Ad
 </summary>
</member><member name="M:ATLib.Ad.AddSpecs">
	<summary>
 Checks the ad's spec list and adds in any new specs from the spec group
 which are not already attached to the ad
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.DeleteSpecs">
	<summary>
 Deletes the set of specs for the ad
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.ClearImages">
	<summary>
 Clears the image list to forece a reload on the next call
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.GenerateSortKey">
	<summary>
 Generates the sort key from the first words of the ad
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.RemoveInstances(System.Int32,System.Int32)">
	<summary>
 Deletes the ad instance for the supplied product id
 </summary>
	<param name="ProductID">ProductID</param>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.ClearInstances">
	<summary>
 Clears the instance list to cause a db re-read next call
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.AddInstance(System.Int32,System.Int32)">
	<summary>
 Adds an ad instance to the ad for the specified product and returns it
 </summary>
	<param name="ProductID">ProductID</param>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.GetInstance(System.Int32,System.Int32)">
	<summary>
 Returns the instance if it exists, otherise returns nothing. This function can therefore be used
 to check if an instance exists
 </summary>
	<param name="ProductId"></param>
	<param name="EditionID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.IncrClickCount">
	<summary>
 Increments the ad click count
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.DeleteInstance(System.Int32,System.Int32)">
	<summary>
 Deletes the specified ad instance
 </summary>
	<param name="ProductID"></param>
	<param name="EditionID"></param>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.InvalidateInstancePreviews">
	<summary>
 Sets the instance preview flag to invalid for all instances attached to this ad. Called as a result
 of a text or image change.    ''' 
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.IsInProduct(System.Int32)">
	<summary>
 Tests if the ad is defined for the supplied product
 </summary>
	<param name="productID">ProductID</param>
	<returns>True if ad is defined for product, false otherwise</returns>
	<remarks></remarks>
</member><member name="M:ATLib.Ad.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Ad.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Ad">
	<summary>
		<para> The Ad object holds all data retrieved from a specified row of the Ad table.
</para>
		<para>It is always accessed as part of the Ads collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Ads collection
  property of the parent. 
 </para>
	</summary>
</member><member name="P:ATLib.SpecDefinitions.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Ads(i)
 </summary>
	<param name="index">index in the range 0...Ads.count-1</param>
	<value>Ad object from Ads collection, at the indexed postion.</value>
</member><member name="M:ATLib.SpecDefinitions.Add(ATLib.SpecDefinition)">
	<summary>
 Adds an Ad object to the Ads collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Ad object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.SpecDefinitions.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.SpecDefinitions.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.SpecDefinitions.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.SpecDefinitions.retrieveSet(System.Int32)">
	<summary>
 Retreives the set of specs for the spec group
 </summary>
	<param name="SpecGroupID">SpecGroupID</param>
	<remarks></remarks>
</member><member name="M:ATLib.SpecDefinitions.retrieveClassificationSet(System.Int32)">
	<summary>
 Retreives the set of specs for all spec groups within the classification
 </summary>
	<param name="ClassificationID">ClassificationID</param>
	<remarks></remarks>
</member><member name="M:ATLib.SpecDefinitions.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.SpecDefinitions">
	<summary>
		<para>The spec dictionary contains definitions of all the specs on a per SpecGroup basis.
 </para>
	</summary>
</member><member name="T:ATLib.SpecDefinition.DisplayTypes">
	<summary>
 Defines the display types for the spec builder
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.SpecDefinition.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
</member><member name="P:ATLib.SpecDefinition.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.SpecDefinition.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.SpecDefinition.SpecGroupID">
	<summary>
 Returns the ID of the spec group
 </summary>
</member><member name="P:ATLib.SpecDefinition.SpecGroup">
	<summary>
 Returns the spec group object that the spec definition is in
 </summary>
</member><member name="P:ATLib.SpecDefinition.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically Valued boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.SpecDefinition.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.SpecDefinition.SortKey">
	<summary>
 Specifies the Production status of the Ad
 </summary>
</member><member name="P:ATLib.SpecDefinition.DisplayType">
	<summary>
 Specifies the Run status of the Ad
 </summary>
</member><member name="P:ATLib.SpecDefinition.Name">
	<summary>
 Name - name of the spec definition
 </summary>
</member><member name="P:ATLib.SpecDefinition.ValueList">
	<summary>
 Value List - value options or default value
 </summary>
</member><member name="P:ATLib.SpecDefinition.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.SpecDefinition.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.SpecDefinition.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.SpecDefinition.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.SpecDefinition.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.SpecDefinition">
	<summary>
		<para> The spec definiton object holds the definition of a specification
 </para>
	</summary>
</member><member name="T:ATLib.goo">
	<summary>
 Calls the google gl shortener to obtain a short url from a supplied url
 </summary>
</member><member name="P:ATLib.Products.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Products(i)
 </summary>
	<param name="index">index in the range 0...Products.count-1</param>
	<value>Product object from Products collection, at the indexed postion.</value>
</member><member name="M:ATLib.Products.Add(ATLib.Product)">
	<summary>
 Adds a Product object to the Products collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Product object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Products.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Products.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Products.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Products.GetProductCount(ATLib.ATSystem.ObjectTypes,System.Int32)">
	<summary>
 Returns the total number of Products according the the object type and ID passed
 </summary>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Products.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Products">
	<summary>
		<para>The Products collection is used to hold the set of Product
 objects. The collection is normally accessed by using the Products property of the parent System object.
  This class manages the Product database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="M:ATLib.Product.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Product.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Product.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Product.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Product.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Product.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Product.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Product.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Product.Description">
	<summary>Description</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Product.Type">
	<summary>Description</summary>
	<returns>Product Type</returns>
</member><member name="P:ATLib.Product.Checked">
	<summary>
 Memory-only value not written to db. Used to set bound check boxes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Product.SortKey">
	<summary>Sort Key</summary>
	<returns>Sort Key</returns>
</member><member name="P:ATLib.Product.Publication">
	<summary>
 Embedded publication object, to which this Product is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Product.AdInstances">
	<summary>
 Embedded publication object, to which this Product is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Product.publicationID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Product.InstanceLoading">
	<summary>Additional price for one instance of an ad in this product</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Product.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Product.HasAd(System.Int32)">
	<summary>
 Tests if the product has the ad as one of its instances
 </summary>
	<param name="AdID">ProductID</param>
	<returns>True if ad is defined for product, false otherwise</returns>
	<remarks></remarks>
</member><member name="M:ATLib.Product.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Product.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Product">
	<summary>
		<para> The Product object holds all data retrieved from a specified row of the Product table.
</para> It is always accessed as part of the Products collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Products collection
  property of the parent. 
 </summary>
</member><member name="P:ATLib.Folders.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Folders(i)
 </summary>
	<param name="index">index in the range 0...Folders.count-1</param>
	<value>Folder object from Folders collection, at the indexed postion.</value>
</member><member name="M:ATLib.Folders.Add(ATLib.Folder)">
	<summary>
 Adds a Folder object to the Folders collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Folder object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Folders.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Folders.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Folders.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Folders.GetFirstFolderID">
	<summary>
 Returns the ID of the first proof folder
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Folders.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Folders">
	<summary>
		<para>The Folders collection is used to hold the set of Folder
 objects. The collection is normally accessed by using the Folders property of the parent System object.
  This class manages the Folder database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="M:ATLib.Folder.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Folder.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Folder.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Folder.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Folder.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Folder.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Folder.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Folder.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Folder.Description">
	<summary>Description</summary>
</member><member name="P:ATLib.Folder.Sortkey">
	<summary>Sortkey</summary>
</member><member name="P:ATLib.Folder.SpoolerCommand">
	<summary>Sortkey</summary>
</member><member name="P:ATLib.Folder.IsProdnFolder">
	<summary>
 Defines whether the folder is to be displayed in prodn wizard.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Folder.IsSpooled">
	<summary>
 Defines whether the folder is spooled.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Folder.IsSpoolerActive">
	<summary>
 Defines whether the folder is spooled.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.Folder.System">
	<summary>
 Embedded system object, to which this Folder is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Folder.SystemID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Folder.DoneFolderID">
	<summary>ID of the done folder</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Folder.ErrorFolderID">
	<summary>ID of the done folder</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Folder.Ads">
	<summary>
 Returns a collection of ad objects, representing all of the ads
 which have been placed by this user.
 </summary>
	<value>Collection of ad objects subordinate to the parent User</value>
</member><member name="P:ATLib.Folder.Ads(ATLib.Ad.ProdnState)">
	<summary>
 Returns a collection of order objects, representing all of the orders
 which have been placed FOR this user, which are in the prodnstatus range, and qualified by the filter parameter.
 </summary>
	<value>Collection of Order objects subordinate to the parent User,
 qualified by the Filter param</value>
	<param name="ProdnStatus">specifies the production status</param>
</member><member name="P:ATLib.Folder.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Folder.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Folder.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Folder">
	<summary>
		<para> The Folder object holds all data retrieved from a specified row of the Folder table.
</para> It is always accessed as part of the Folders collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Folders collection
  property of the parent. 
 </summary>
</member><member name="P:ATLib.NewsItems.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG NewsItems(i)
 </summary>
	<param name="index">index in the range 0...NewsItems.count-1</param>
	<value>NewsItem object from NewsItems collection, at the indexed postion.</value>
</member><member name="M:ATLib.NewsItems.Add(ATLib.NewsItem)">
	<summary>
 Adds a NewsItem object to the NewsItems collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">NewsItem object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.NewsItems.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.NewsItems.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.NewsItems.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.NewsItems.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.NewsItems">
	<summary>
 The NewsItems class implements a collection of NewsItem objects, which are directly subordinate
 to the System object. System Colors provide a single system wide reference of all spot colors that can be defined
 in inks, foils and paper. System Colors are maintained in the RGB color space.
 </summary>
</member><member name="T:ATLib.NewsItem.ProdnState">
	<summary>
 Defines the state that a Technote can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.NewsItem.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.NewsItem.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.NewsItem.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.NewsItem.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.NewsItem.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.NewsItem.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.NewsItem.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.NewsItem.PhysicalApplicationPath">
	<summary>
 Fully qualified path to the web application. This field
 is normally plugged by a call to Server.MapPath(Request.ApplicationPath), and is used as a property in databinding
 </summary>
</member><member name="P:ATLib.NewsItem.System">
	<summary>
 Parent system object, to which the NewsItems are subordinate
 </summary>
	<value></value>
</member><member name="P:ATLib.NewsItem.systemID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.NewsItem.ProdnStatus">
	<summary>
 Specifies the Production status of the Ad
 </summary>
</member><member name="P:ATLib.NewsItem.HasImage">
	<summary>
 Defines whether this news item has a pic.
 </summary>
</member><member name="P:ATLib.NewsItem.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.NewsItem.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.NewsItem">
	<summary>
		<para> The NewsItem object holds all data retrieved from a specified row of the NewsItem table.
</para>
		<para>It is always accessed as part of the NewsItems collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded NewsItems collection
  property of the parent. 
 </para>
	</summary>
</member><member name="P:ATLib.Technotes.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Technotes(i)
 </summary>
	<param name="index">index in the range 0...Technotes.count-1</param>
	<value>Technote object from Technotes collection, at the indexed postion.</value>
</member><member name="M:ATLib.Technotes.Add(ATLib.Technote)">
	<summary>
 Adds a Technote object to the Technotes collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Technote object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Technotes.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Technotes.RetrieveSet(System.Int32,ATLib.Technote.State)">
	<summary>
 Retrieves all Technotes which have the supplied status.
 </summary>
	<param name="status">Technote status</param>
	<param name="SystemID">SystemID</param>
</member><member name="M:ATLib.Technotes.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Technotes.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Technotes.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Technotes">
	<summary>
 The Technotes class implements a collection of Technotes, used for system development reporting purposes.
 </summary>
</member><member name="T:ATLib.Technote.State">
	<summary>
 Defines the state that a Technote can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Technote.Resolutions">
	<summary>
 Defines what we decided to do to a Technote.
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.Technote.Reporters">
	<summary>
 Defines who can make up Technotes. Note the VB reserved word.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.Technote.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Technote.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Technote.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Technote.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Technote.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Technote.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Technote.ProblemDescription">
	<summary>
 Technote description field, truncated at 4096 characters.
 </summary>
</member><member name="P:ATLib.Technote.ProblemFix">
	<summary>
 Technote fix field, truncated at 4096 characters.
 </summary>
</member><member name="P:ATLib.Technote.Status">
	<summary>
 Status of the Technote
 </summary>
	<value></value>
</member><member name="P:ATLib.Technote.Resolution">
	<summary>
 Determined resolution of the Technote
 </summary>
	<value></value>
</member><member name="P:ATLib.Technote.System">
	<summary>
 Parent system object which owns the Technote.
 </summary>
	<value></value>
</member><member name="P:ATLib.Technote.ReportedBy">
	<summary>
 Person who reported the Technote
 </summary>
</member><member name="P:ATLib.Technote.FixedBy">
	<summary>
 Person who fixed the Technote
 </summary>
</member><member name="P:ATLib.Technote.systemID">
	<summary>
 ID of owning system object
 </summary>
</member><member name="P:ATLib.Technote.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Technote.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.Technote">
	<summary>
		<para> The Technote object holds all data retrieved from a specified row of the Technote table.
</para>
		<para>It is always accessed as part of the Technotes collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Technotes collection
  property of the parent.
 </para>
	</summary>
</member><member name="P:ATLib.AdInstances.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG AdInstances(i)
 </summary>
	<param name="index">index in the range 0...AdInstances.count-1</param>
	<value>AdInstance object from AdInstances collection, at the indexed postion.</value>
</member><member name="M:ATLib.AdInstances.Add(ATLib.AdInstance)">
	<summary>
 Adds a AdInstance object to the AdInstances collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">AdInstance object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.AdInstances.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.AdInstances.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.AdInstances.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.AdInstances.RetrieveSet(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>This is a general puroose call which retrieves any number of ad instances
 from the supplied IDS of parent ad, product and edition. If any of the three keys
 are set to nullvalue it means 'dont care'
</summary>
	<param name="UsrID">Usr ID</param>
	<param name="ADID">Ad ID</param>
	<param name="PublicationID">Publication ID</param>
	<param name="ProductID">Product ID</param>
	<param name="EditionID">Edition ID</param>
</member><member name="M:ATLib.AdInstances.RetrieveDumpSet(System.Int32,ATLib.Ad.ProdnState)">
	<summary>
 Used by the classad dump. Retrieves all adinstances for the nominated edition, sorted by Ad Category:Classification:Sortkey
 Where the ad is in the specified prodn state
 </summary>
	<param name="EditionID"></param>
	<param name="ProdnStatus"></param>
	<remarks></remarks>
</member><member name="M:ATLib.AdInstances.RetrieveFeaturedSet(System.Int32,ATLib.Edition.VisibleState,ATLib.Ad.ProdnState)">
	<summary>Retrieves the featured ads for the edition
</summary>
	<param name="PublicationID">Publication ID</param>
	<param name="Visibility">Edition Visibility</param>
	<param name="ProdnStatus">Prodn Status</param>
</member><member name="M:ATLib.AdInstances.GetKeywordList(System.Int32,ATLib.ATSystem.ObjectTypes,System.Int32,ATLib.Edition.VisibleState,ATLib.Ad.ProdnState,System.String)">
	<summary>
 Searches the edition on first words and returns the found list
 </summary>
	<param name="PublicationID"></param>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<param name="Visibility">Edition Visibility</param>
	<param name="ProdnStatus"></param>
	<param name="Key"></param>
	<remarks></remarks>
</member><member name="M:ATLib.AdInstances.RetrievePagedDisplaySet(System.Int32,System.Int32,ATLib.Edition.VisibleState,ATLib.Ad.ProdnState,System.Int32,System.Int32)">
	<summary>This is a general puroose call which retrieves any number of ad instances
 from the supplied IDS of parent ad, product and edition. If any of the three keys
 are set to nullvalue it means 'dont care'
</summary>
	<param name="ClassificationID">Classification ID</param>
	<param name="PublicationID">Publication ID</param>
	<param name="Visibility">Edition Visibility</param>
	<param name="ProdnStatus">Prodn Status</param>
	<param name="StartIndex">Start Index</param>
	<param name="Count">Count ID</param>
</member><member name="M:ATLib.AdInstances.RetrievePagedSearchSet(ATLib.ATSystem.ObjectTypes,System.Int32,System.Int32,ATLib.Edition.VisibleState,ATLib.Ad.ProdnState,System.String,System.Int32,System.Int32)">
	<summary>This is a general purpose call which retrieves any number of ad instances
 from the supplied IDS of parent ad, product and edition. If any of the three keys
 are set to nullvalue it means 'dont care'
</summary>
	<param name="ObjectType">ObjectType</param>
	<param name="ObjectID">Object ID</param>
	<param name="PublicationID">Publication ID</param>
	<param name="Visibility">Edition visibility</param>
	<param name="ProdnStatus">Prodn Status</param>
	<param name="Key">Key</param>
	<param name="StartIndex">Start Index</param>
	<param name="Count">Count ID</param>
</member><member name="M:ATLib.AdInstances.getFTKeyNoStop(System.String)">
	<summary>
 works only for SQL Server 2008. Uses the parser to eliminate stop words from the search
 key
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.AdInstances.DeleteSet(System.Int32,System.Int32,System.Int32)">
	<summary>This is a general puroose call which deletes any number of ad instances
 from the supplied IDS of parent ad, product and edition. If any of the three keys
 are set to nullvalue it means 'dont care'
</summary>
	<param name="AdID">Ad ID</param>
	<param name="ProductID">Product ID</param>
	<param name="EditionID">Edition ID</param>
</member><member name="M:ATLib.AdInstances.Update">
	<summary>Updates the AdInstances collection back to the database. Only those objects in the collection which have been
 either modified, created from new, or marked for deletion are re-written.</summary>
</member><member name="T:ATLib.AdInstances">
	<summary>
 Inmplements a M:M relationship between Ads and Products, to define which Ads can be accessed by which Products.
 </summary>
</member><member name="M:ATLib.AdInstance.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.AdInstance.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.AdInstance.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.AdInstance.ProductID">
	<summary>Product ID, of the parent Product object</summary>
	<value>ProductID as an integer</value>
</member><member name="P:ATLib.AdInstance.EditionID">
	<summary>Edition ID, of the parent Edition object</summary>
	<value>EditionID as an integer</value>
</member><member name="P:ATLib.AdInstance.ProductHexID">
	<summary>Product ID in hex form, of the parent Product object</summary>
	<value>ProductID as a hex string</value>
</member><member name="P:ATLib.AdInstance.PhysicalApplicationPath">
	<summary>
 Fully qualified path to the web application. This field
 is normally plugged by a call to Server.MapPath(Request.ApplicationPath), and is used as a property in databinding
 </summary>
</member><member name="P:ATLib.AdInstance.ProdnPDFFolder">
	<summary>
 Fully qualified path to the production folder
 </summary>
</member><member name="P:ATLib.AdInstance.INDDFilename">
	<summary>
 INDD filename of display ad, or empty string otherwise
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.AdInstance.INDDShortFilename">
	<summary>
 INDD short filename of display ad, or empty string otherwise
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.AdInstance.PreviewSequence">
	<summary>Preview Sequence - used to generate unique preview filenames</summary>
	<value>PreviewSequence as an integer</value>
</member><member name="P:ATLib.AdInstance.AdID">
	<summary>
 Ad ID, of the parent Ad object</summary>
	<value>AdID as an integer</value>
</member><member name="P:ATLib.AdInstance.AdHexID">
	<summary>Ad ID in hex form, of the parent Ad object</summary>
	<value>AdID as a hex string</value>
</member><member name="P:ATLib.AdInstance.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.AdInstance.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.AdInstance.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.AdInstance.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.AdInstance.Price">
	<summary>Price of this instance of the ad</summary>
</member><member name="P:ATLib.AdInstance.ProdnSurcharge">
	<summary>Production Surcharge price</summary>
</member><member name="P:ATLib.AdInstance.PriceAdjust">
	<summary>Price Adjustment - -ve or +ve</summary>
</member><member name="P:ATLib.AdInstance.Width">
	<summary>Width of ad in column enums</summary>
</member><member name="P:ATLib.AdInstance.ExactWidth">
	<summary>Exact width of ad in mm * 1000 as determined by INDD</summary>
</member><member name="P:ATLib.AdInstance.Height">
	<summary>height of ad in lines or cm excluding pic for classifieds</summary>
</member><member name="P:ATLib.AdInstance.ExactHeight">
	<summary>Exact height of ad in mm * 1000 as determined by INDD</summary>
</member><member name="P:ATLib.AdInstance.Color">
	<summary>Color of (display) ad</summary>
</member><member name="P:ATLib.AdInstance.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="P:ATLib.AdInstance.Ad">
	<summary>
 Returns the ad object for this instance
 </summary>
</member><member name="P:ATLib.AdInstance.Product">
	<summary>
 Returns the product object for this instance
 </summary>
</member><member name="P:ATLib.AdInstance.Edition">
	<summary>
 Returns the edition object for this instance
 </summary>
</member><member name="P:ATLib.AdInstance.IsPreviewValid">
	<summary>
 Defines whether the proof preview is valid or not.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="P:ATLib.AdInstance.IsCheckedOut">
	<summary>
 Defines whether the object is checked out.
 </summary>
	<value>True if the spec is active, false otherwise.</value>
</member><member name="M:ATLib.AdInstance.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.AdInstance">
	<summary>
 The AdInstance object is used to associated Product availaibility of Ads by imlementing a M:M relationship between
 Ad and Product
 </summary>
</member><member name="T:ATLib.ATSystem.StatusBits">
	<summary> This is the definition of bits in the status word for all objects. The low 16 bits are
 common to all classes, and the high 16 bits can be class-specific and therefore
 have overlapping values. The class that uses these high bits is identified in
 the comment</summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.ATSystem.SysConstants">
	<summary> Defines global system constants which are used to define SQL field lengths
 In particular, nullValue is used to denote the NULL value of the identity value of the primary ke</summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.ATSystem.Skins">
	<summary> Skins</summary>
</member><member name="T:ATLib.ATSystem.countrycodes">
	<summary> Country codes. Source = http://ftp.ics.uci.edu/pub/websoft/wwwstat/country-codes.txt</summary>
</member><member name="T:ATLib.ATSystem.ObjectTypes">
	<summary>
 Provides a numeric enumerator for all the classes in  In many cases, these values qualify the objectID parameter, to determine which 
 parent table is appropriate. See Datafields and Contacts for an example of this usage.
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.ATSystem.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.ATSystem.HostIP">
	<summary>
 Looks up the DNS to get the host name that this object is exectuing on.
 </summary>
	<value>First entry in the DNS that desribes this host.</value>
</member><member name="P:ATLib.ATSystem.MyName">
	<summary>
 Returns the local name of the computer this object is exectuing on.
 </summary>
	<value>My.Computer.Name</value>
</member><member name="P:ATLib.ATSystem.SWBuild">
	<summary>
 Returns the integer build value from the in-memory system object which identifies the build number.
 </summary>
</member><member name="P:ATLib.ATSystem.SWVersion">
	<summary>
 Returns the build number converted to a string and divided by 1000, eg V2.233
 </summary>
</member><member name="P:ATLib.ATSystem.BuildDate">
	<summary>
 Returns the buld date and time as a string from the in-memory system object.
 </summary>
</member><member name="P:ATLib.ATSystem.BuildInfo">
	<summary>
 Returns a human readable string whcih summaries the build information.
 </summary>
</member><member name="P:ATLib.ATSystem.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.ATSystem.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.ATSystem.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.ATSystem.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.ATSystem.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.ATSystem.SMTPHost">
	<summary>
 The name of the mail server SMTP host. This is used by Timer Services and Billing Agent to forward order-processed emails.
 </summary>
	<value>Email server name eg mail.com</value>
</member><member name="P:ATLib.ATSystem.SMTPPort">
	<summary>
 the SMTP port number, used in conjunction with the SMTPHost property for identifying which mail server to use for sending in emails
 </summary>
	<value>Normally set to Port 25.</value>
</member><member name="P:ATLib.ATSystem.SMTPUser">
	<summary>
 The login name used by Timer Services and Billing Agent to login to the SMTP host for sending order processed emails.
 </summary>
</member><member name="P:ATLib.ATSystem.SMTPPassword">
	<summary>
 the login password used by Timer Services an Billing Agent to login to the SMTP host for sending order pocessed emails.
 </summary>
</member><member name="P:ATLib.ATSystem.BCCEmailAddr">
	<summary>
 BCC email address for drop copies of all outgoing emails.
 </summary>
</member><member name="P:ATLib.ATSystem.FirstFolderID">
	<summary>
 Returns th ID of the first folder
 </summary>
</member><member name="P:ATLib.ATSystem.TestEmailAddr">
	<summary>
 Rates spreadsheet.
 </summary>
</member><member name="P:ATLib.ATSystem.TwitConsumerKey">
	<summary>
 twitter oauth keys
 </summary>
</member><member name="P:ATLib.ATSystem.TwitConsumerKeySecret">
	<summary>
 twitter oauth keys
 </summary>
</member><member name="P:ATLib.ATSystem.TwitOAuthToken">
	<summary>
 twitter oauth keys
 </summary>
</member><member name="P:ATLib.ATSystem.TwitOAuthTokenSecret">
	<summary>
 twitter oauth keys
 </summary>
</member><member name="P:ATLib.ATSystem.TwitUserName">
	<summary>
 twitter user name
 </summary>
</member><member name="P:ATLib.ATSystem.RateSpreadsheet">
	<summary>
 Rates spreadsheet.
 </summary>
</member><member name="P:ATLib.ATSystem.DisplaySheet">
	<summary>
 Rates spreadsheet.
 </summary>
</member><member name="P:ATLib.ATSystem.ClassifiedSheet">
	<summary>
 Rates spreadsheet.
 </summary>
</member><member name="P:ATLib.ATSystem.ClassadLineHeight">
	<summary>
 Classad line height in mm * 1000.
 </summary>
</member><member name="P:ATLib.ATSystem.ClassadPicHeight">
	<summary>
 Classad line height in mm * 1000.
 </summary>
</member><member name="P:ATLib.ATSystem.LatestListingLoading">
	<summary>
 Latest Listing Loading in cents.
 </summary>
</member><member name="P:ATLib.ATSystem.LatestListingKillTime">
	<summary>
 Latest Listing Kill Time.
 </summary>
</member><member name="P:ATLib.ATSystem.DisplayColumnCount">
	<summary>
 Display column count
 </summary>
</member><member name="P:ATLib.ATSystem.DisplayColumnWidth">
	<summary>
 Display column width in mm * 1000.
 </summary>
</member><member name="P:ATLib.ATSystem.DisplayColumnHeight">
	<summary>
 Display column height in mm * 1000.
 </summary>
</member><member name="P:ATLib.ATSystem.DisplayGutterWidth">
	<summary>
 Display gutter width in mm * 1000.
 </summary>
</member><member name="P:ATLib.ATSystem.EngineName">
	<summary>
 Engine name
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.ATSystem.EngineAddress">
	<summary>
 Engine address
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.ATSystem.EnginePort">
	<summary>
 Engine port
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.ATSystem.JobTimeout">
	<summary>
 Job Timeout
 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.ATSystem.ClassadTemplate">
	<summary>
 Nanme of stand-alone classad template.
 </summary>
</member><member name="P:ATLib.ATSystem.SourceImageOriginalFolder">
	<summary>
 Absolute physical path to the shared folder where images are stored on upload.
 </summary>
</member><member name="P:ATLib.ATSystem.SourceImageWorkingFolder">
	<summary>
 Absolute physical path to the shared folder where images are stored on upload.
 </summary>
</member><member name="P:ATLib.ATSystem.FrontSequence">
	<summary>Front Iamge  Sequence - used to generate unique preview filenames</summary>
</member><member name="P:ATLib.ATSystem.BackSequence">
	<summary>Back Iamge  Sequence - used to generate unique preview filenames</summary>
</member><member name="P:ATLib.ATSystem.CoverSequence">
	<summary>Cover Iamge  Sequence - used to generate unique preview filenames</summary>
</member><member name="P:ATLib.ATSystem.FrontPicCaption">
	<summary>
 Caption of front cover pic.
 </summary>
</member><member name="P:ATLib.ATSystem.BackPicCaption">
	<summary>
 Caption of back cover pic.
 </summary>
</member><member name="P:ATLib.ATSystem.PhysicalApplicationPath">
	<summary>
 Absoulute physical path where the web server is currently executing. This is used by all objects that need to read or write files directly into subfolders of the web application, using Windows io services.
 </summary>
</member><member name="P:ATLib.ATSystem.InternalURL">
	<summary>
 Web site URL in internal format, eg //192.168.... which is used by Data Wizard to provide a private inhouse access to teh web app.
 </summary>
</member><member name="P:ATLib.ATSystem.ExternalURL">
	<summary>
 Web site URL in external format, eg http://www.printfuse.com which is used by the order email generator to provide an absolute path to the web app for image retrieval from received emails.
 </summary>
</member><member name="P:ATLib.ATSystem.ProformaImageFolder">
	<summary>
 Absolute path which specifies the shared folder location where proxy images are held for inclusion into InDesign templates.
 </summary>
</member><member name="P:ATLib.ATSystem.DisplayAdFolder">
	<summary>
 Absolute path which specifies the shared folder location where display ads are kept.
 </summary>
</member><member name="P:ATLib.ATSystem.ClassAdFolder">
	<summary>
 Absolute path which specifies the shared folder location where display ads are kept.
 </summary>
</member><member name="P:ATLib.ATSystem.ProdnPDFFolder">
	<summary>
 Absolute path to the prodn pdf for display ads.
 </summary>
</member><member name="P:ATLib.ATSystem.CurrentAdSequence">
	<summary>
 Current ad number as it increases sequentially thru range 0000...9999. Reset at the beginning
 of each month by timer services.
 </summary>
</member><member name="P:ATLib.ATSystem.IsEmailTestMode">
	<summary>
 Defines whether user is gst exempt.
 </summary>
</member><member name="P:ATLib.ATSystem.EditionCloseDays">
	<summary>
 Number of days before edition close for timer services to generate emails.
 </summary>
</member><member name="P:ATLib.ATSystem.LRImageHeight">
	<summary>
 Subsampled width in pixels of images that are painted up in the image preview page on the browser.
 </summary>
</member><member name="P:ATLib.ATSystem.THBImageHeight">
	<summary>
 Image width for list-mode display of multiple images or templates at the browser.
 </summary>
</member><member name="P:ATLib.ATSystem.FrontPicType">
	<summary>
 front pic image type.
 </summary>
</member><member name="P:ATLib.ATSystem.BackPicType">
	<summary>
 back pic image type.
 </summary>
</member><member name="P:ATLib.ATSystem.SlotTimeout">
	<summary>
 Time in seconds that a slot can be idle (ie no user activity) before Timer Services times it out.
 </summary>
</member><member name="P:ATLib.ATSystem.SlotPurge">
	<summary>
 Time in days that logged-out or timed-out slots will be retained on the database before being purged by Timer Services.
 </summary>
</member><member name="P:ATLib.ATSystem.Slots">
	<summary>Embedded collection of slot objects. Holds all slots within the
 system.</summary>
	<value>Collection of slots</value>
</member><member name="P:ATLib.ATSystem.Slots(ATLib.Slot.LoginStates)">
	<summary>Embedded collection of slot objects. Holds all slots within the
 system whose status matches the supplied parameter</summary>
	<param name="status">slot status</param>
	<returns>Returns collection of slots subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Categories">
	<summary>Embedded collection of category objects.</summary>
	<returns>Returns collection of categories subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Classifications">
	<summary>Embedded collection of classification objects.</summary>
	<returns>Returns the entire set of classifications across all categories, sorted by classification
 sort order</returns>
</member><member name="P:ATLib.ATSystem.Publications">
	<summary>Embedded collection of category objects.</summary>
	<returns>Returns collection of categories subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Publications(ATLib.Publication.Types)">
	<summary>Embedded collection of category objects.</summary>
	<returns>Returns collection of categories subordinate to the system whose status is as requested</returns>
	<param name="Type">publication type</param>
</member><member name="P:ATLib.ATSystem.RotatorAds(ATLib.RotatorAd.Categories)">
	<summary>Embedded collection of category objects.</summary>
	<returns>Returns collection of categories subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.NewsItems(ATLib.NewsItem.ProdnState)">
	<summary>Embedded collection of newsitem objects.</summary>
	<returns>Returns collection of newsitems subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Technotes(ATLib.Technote.State)">
	<summary>Embedded collection of technote objects.</summary>
	<returns>Returns collection of technotes subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Folders">
	<summary>Embedded collection of folder objects.</summary>
</member><member name="P:ATLib.ATSystem.ProdnFolders">
	<summary>Embedded collection of folder objects which are defined as prodn folders.</summary>
</member><member name="P:ATLib.ATSystem.Usrs">
	<summary>Embedded collection of user objects.</summary>
	<returns>Returns collection of categories subordinate to the system whose status is as requested</returns>
</member><member name="P:ATLib.ATSystem.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.ATSystem.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="P:ATLib.ATSystem.ConnectionString">
	<summary>Allows the caller to specify the connection string, if known. This
 value is, in turn, plugged into all child objects within retrieved collections.
 This property does not have to be set; if it is not set, then the class will
 make a call on the Configuration Manager to find the connection string. Setting
 the connection string in advance via this property will however lead to faster
 performance.</summary>
	<value>Connection string, as read by the Configuration Manager from the
 app.config or web.config file</value>
</member><member name="M:ATLib.ATSystem.GetCatClassList">
	<summary>
 Returns a list of cat-cls objects suitable for binding in a dd
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.ATSystem.GetdbTime">
	<summary>
 Returns the current timestamp as read from the DBMS on the SQL Server machine. This provides a 
 common system-wide time reference, which is preferable to calling NOW which returns the time on the local machine on which the call is made.
 </summary>
	<returns>Current time of the DBMS.</returns>
	<remarks></remarks>
</member><member name="M:ATLib.ATSystem.GetNextAdNumber">
	<summary>
 Returns the next ad number in the form YYYYMMNNNN where NNNN is derived from the current ad sequence
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.ATSystem.TouchMonth">
	<summary>
 called by TS. looks at the current month and if it differs from todays, date, resets the ad sequence
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.ATSystem.MapEngine(ATLib.ATSystem.EngineModes)">
	<summary>
 Returns the EngineServices object. Only one instantiation of engineservices is allowed, and this
 is done by the engine (mode = Modes.server). Clients (mode = Modes.client) which call this method
 are granted simultaneous to the same remote object that is running within the engine.
 </summary>
	<param name="mode">Calling mode, to denote client or server (engine)</param>
	<returns>Engine Services proxy object</returns>
</member><member name="M:ATLib.ATSystem.UnMapServices">
	<summary>
 Called by both client and engine when EngineServices are no longer required. Releases remoting resources
 and unregisters the TCP channel used for communicating with the engine.
 </summary>
</member><member name="M:ATLib.ATSystem.Retrieve">
	<summary>Retrieves the system objects - there is only one.</summary>
</member><member name="M:ATLib.ATSystem.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.ATSystem">
	<summary>The System object is the root node of the database. It manages the System table in the database. All other
 objects are subordinate to the System. In the current implementation,
 there is only one System record in the DB and therefore only one System object.
 The UI does not currently support more than one System, but implementers should
 note that the database structure and the object model does indeed support
 multiple Systems if that is ever required.
 </summary>
	<version>V1.000 16-JUL-2007</version>
</member><member name="P:ATLib.Editions.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Editions(i)
 </summary>
	<param name="index">index in the range 0...Editions.count-1</param>
	<value>Edition object from Editions collection, at the indexed postion.</value>
</member><member name="M:ATLib.Editions.Add(ATLib.Edition)">
	<summary>
 Adds a Edition object to the Editions collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Edition object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Editions.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Editions.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Editions.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Editions.GetEditionCount(ATLib.ATSystem.ObjectTypes,System.Int32)">
	<summary>
 Returns the total number of Products according the the object type and ID passed
 </summary>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Editions.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Editions">
	<summary>
		<para>The Editions collection is used to hold the set of Edition
 objects. The collection is normally accessed by using the Editions property of the parent System object.
  This class manages the Edition database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="M:ATLib.Edition.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Edition.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Edition.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Edition.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Edition.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Edition.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Edition.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Edition.ShortName">
	<summary>Object short Name. Used for display in the edition/product selector
</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Edition.SortKey">
	<summary>SortKey</summary>
	<returns>SortKey</returns>
</member><member name="P:ATLib.Edition.Description">
	<summary>Description</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Edition.CSSClass">
	<summary>
 memory-only property to display highlight on page
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.AdDeadline">
	<summary>
 Ad deadline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.ProdnDeadline">
	<summary>
 Prodn deadline
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.OnsaleDate">
	<summary>
 On sale date
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.Publication">
	<summary>
 Embedded publication object, to which this Edition is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Edition.publicationID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Edition.AdInstances">
	<summary>
 Embedded publication object, to which this Product is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.Edition.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Edition.HasAd(System.Int32)">
	<summary>
 Tests if the Edition has the ad as one of its instances
 </summary>
	<param name="AdID">EditionID</param>
	<returns>True if ad is defined for Edition, false otherwise</returns>
	<remarks></remarks>
</member><member name="P:ATLib.Edition.Checked">
	<summary>
 Memory-only value not written to db. Used to set bound check boxes
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Edition.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.Edition.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.Edition">
	<summary>
		<para> The Edition object holds all data retrieved from a specified row of the Edition table.
</para> It is always accessed as part of the Editions collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Editions collection
  property of the parent. 
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.CRC32">
	<summary>
 Cyclic Redundancy Check provider, 32-bit
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.SHA1">
	<summary>
 Secure Hashing Algorithm provider, SHA-1 variant, 160-bit
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.SHA256">
	<summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 256-bit
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.SHA384">
	<summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 384-bit
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.SHA512">
	<summary>
 Secure Hashing Algorithm provider, SHA-2 variant, 512-bit
 </summary>
</member><member name="F:ATLib.Encryption.Hash.Provider.MD5">
	<summary>
 Message Digest algorithm 5, 128-bit
 </summary>
</member><member name="T:ATLib.Encryption.Hash.Provider">
	<summary>
 Type of hash; some are security oriented, others are fast and simple
 </summary>
</member><member name="M:ATLib.Encryption.Hash.#ctor(ATLib.Encryption.Hash.Provider)">
	<summary>
 Instantiate a new hash of the specified type
 </summary>
</member><member name="P:ATLib.Encryption.Hash.Value">
	<summary>
 Returns the previously calculated hash
 </summary>
</member><member name="M:ATLib.Encryption.Hash.Calculate(System.IO.Stream@)">
	<summary>
 Calculates hash on a stream of arbitrary length
 </summary>
</member><member name="M:ATLib.Encryption.Hash.Calculate(ATLib.Encryption.Data)">
	<summary>
 Calculates hash for fixed length <see cref="T:ATLib.Encryption.Data"/>
	</summary>
</member><member name="M:ATLib.Encryption.Hash.Calculate(ATLib.Encryption.Data,ATLib.Encryption.Data)">
	<summary>
 Calculates hash for a string with a prefixed salt value. 
 A "salt" is random data prefixed to every hashed value to prevent 
 common dictionary attacks.
 </summary>
</member><member name="M:ATLib.Encryption.Hash.CalculatePrivate(System.Byte[])">
	<summary>
 Calculates hash for an array of bytes
 </summary>
</member><member name="T:ATLib.Encryption.Hash">
	<summary>
 Hash functions are fundamental to modern cryptography. These functions map binary 
 strings of an arbitrary length to small binary strings of a fixed length, known as 
 hash values. A cryptographic hash function has the property that it is computationally
 infeasible to find two distinct inputs that hash to the same value. Hash functions 
 are commonly used with digital signatures and for data integrity.
 </summary>
</member><member name="F:ATLib.Encryption.Symmetric.Provider.DES">
	<summary>
 The Data Encryption Standard provider supports a 64 bit key only
 </summary>
</member><member name="F:ATLib.Encryption.Symmetric.Provider.RC2">
	<summary>
 The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits
 </summary>
</member><member name="F:ATLib.Encryption.Symmetric.Provider.Rijndael">
	<summary>
 The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits
 </summary>
</member><member name="F:ATLib.Encryption.Symmetric.Provider.TripleDES">
	<summary>
 The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.#ctor(ATLib.Encryption.Symmetric.Provider,System.Boolean)">
	<summary>
 Instantiates a new symmetric encryption object using the specified provider.
 </summary>
</member><member name="P:ATLib.Encryption.Symmetric.KeySizeBytes">
	<summary>
 Key size in bytes. We use the default key size for any given provider; if you 
 want to force a specific key size, set this property
 </summary>
</member><member name="P:ATLib.Encryption.Symmetric.KeySizeBits">
	<summary>
 Key size in bits. We use the default key size for any given provider; if you 
 want to force a specific key size, set this property
 </summary>
</member><member name="P:ATLib.Encryption.Symmetric.Key">
	<summary>
 The key used to encrypt/decrypt data
 </summary>
</member><member name="P:ATLib.Encryption.Symmetric.IntializationVector">
	<summary>
 Using the default Cipher Block Chaining (CBC) mode, all data blocks are processed using
 the value derived from the previous block; the first data block has no previous data block
 to use, so it needs an InitializationVector to feed the first block
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.RandomInitializationVector">
	<summary>
 generates a random Initialization Vector, if one was not provided
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.RandomKey">
	<summary>
 generates a random Key, if one was not provided
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.ValidateKeyAndIv(System.Boolean)">
	<summary>
 Ensures that _crypto object has valid Key and IV
 prior to any attempt to encrypt/decrypt anything
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Encrypt(ATLib.Encryption.Data,ATLib.Encryption.Data)">
	<summary>
 Encrypts the specified Data using provided key
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Encrypt(ATLib.Encryption.Data)">
	<summary>
 Encrypts the specified Data using preset key and preset initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Encrypt(System.IO.Stream,ATLib.Encryption.Data,ATLib.Encryption.Data)">
	<summary>
 Encrypts the stream to memory using provided key and provided initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Encrypt(System.IO.Stream,ATLib.Encryption.Data)">
	<summary>
 Encrypts the stream to memory using specified key
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Encrypt(System.IO.Stream)">
	<summary>
 Encrypts the specified stream to memory using preset key and preset initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Decrypt(ATLib.Encryption.Data,ATLib.Encryption.Data)">
	<summary>
 Decrypts the specified data using provided key and preset initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Decrypt(System.IO.Stream,ATLib.Encryption.Data)">
	<summary>
 Decrypts the specified stream using provided key and preset initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Decrypt(System.IO.Stream)">
	<summary>
 Decrypts the specified stream using preset key and preset initialization vector
 </summary>
</member><member name="M:ATLib.Encryption.Symmetric.Decrypt(ATLib.Encryption.Data)">
	<summary>
 Decrypts the specified data using preset key and preset initialization vector
 </summary>
</member><member name="T:ATLib.Encryption.Symmetric">
	<summary>
 Symmetric encryption uses a single key to encrypt and decrypt. 
 Both parties (encryptor and decryptor) must share the same secret key.
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.LoadFromConfig">
	<summary>
 Load public key from App.config or Web.config file
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.ToConfigSection">
	<summary>
 Returns *.config file XML section representing this public key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.ExportToConfigFile(System.String)">
	<summary>
 Writes the *.config file representation of this public key to a file
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.LoadFromXml(System.String)">
	<summary>
 Loads the public key from its XML string
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.ToParameters">
	<summary>
 Converts this public key to an RSAParameters object
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.ToXml">
	<summary>
 Converts this public key to its XML string representation
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PublicKey.ExportToXmlFile(System.String)">
	<summary>
 Writes the Xml representation of this public key to a file
 </summary>
</member><member name="T:ATLib.Encryption.Asymmetric.PublicKey">
	<summary>
 Represents a public encryption key. Intended to be shared, it 
 contains only the Modulus and Exponent.
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.LoadFromConfig">
	<summary>
 Load private key from App.config or Web.config file
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.ToParameters">
	<summary>
 Converts this private key to an RSAParameters object
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.ToConfigSection">
	<summary>
 Returns *.config file XML section representing this private key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.ExportToConfigFile(System.String)">
	<summary>
 Writes the *.config file representation of this private key to a file
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.LoadFromXml(System.String)">
	<summary>
 Loads the private key from its XML string
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.ToXml">
	<summary>
 Converts this private key to its XML string representation
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.PrivateKey.ExportToXmlFile(System.String)">
	<summary>
 Writes the Xml representation of this private key to a file
 </summary>
</member><member name="T:ATLib.Encryption.Asymmetric.PrivateKey">
	<summary>
 Represents a private encryption key. Not intended to be shared, as it 
 contains all the elements that make up the key.
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.#ctor">
	<summary>
 Instantiates a new asymmetric encryption session using the default key size; 
 this is usally 1024 bits
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.#ctor(System.Int32)">
	<summary>
 Instantiates a new asymmetric encryption session using a specific key size
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.KeyContainerName">
	<summary>
 Sets the name of the key container used to store this key on disk; this is an 
 unavoidable side effect of the underlying Microsoft CryptoAPI. 
 </summary>
	<remarks>
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member><member name="P:ATLib.Encryption.Asymmetric.KeySizeBits">
	<summary>
 Returns the current key size, in bits
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.KeySizeMaxBits">
	<summary>
 Returns the maximum supported key size, in bits
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.KeySizeMinBits">
	<summary>
 Returns the minimum supported key size, in bits
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.KeySizeStepBits">
	<summary>
 Returns valid key step sizes, in bits
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.DefaultPublicKey">
	<summary>
 Returns the default public key as stored in the *.config file
 </summary>
</member><member name="P:ATLib.Encryption.Asymmetric.DefaultPrivateKey">
	<summary>
 Returns the default private key as stored in the *.config file
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.GenerateNewKeyset(ATLib.Encryption.Asymmetric.PublicKey@,ATLib.Encryption.Asymmetric.PrivateKey@)">
	<summary>
 Generates a new public/private key pair as objects
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.GenerateNewKeyset(System.String@,System.String@)">
	<summary>
 Generates a new public/private key pair as XML strings
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Encrypt(ATLib.Encryption.Data)">
	<summary>
 Encrypts data using the default public key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Encrypt(ATLib.Encryption.Data,ATLib.Encryption.Asymmetric.PublicKey)">
	<summary>
 Encrypts data using the provided public key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Encrypt(ATLib.Encryption.Data,System.String)">
	<summary>
 Encrypts data using the provided public key as XML
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Decrypt(ATLib.Encryption.Data)">
	<summary>
 Decrypts data using the default private key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Decrypt(ATLib.Encryption.Data,ATLib.Encryption.Asymmetric.PrivateKey)">
	<summary>
 Decrypts data using the provided private key
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.Decrypt(ATLib.Encryption.Data,System.String)">
	<summary>
 Decrypts data using the provided private key as XML
 </summary>
</member><member name="M:ATLib.Encryption.Asymmetric.GetRSAProvider">
	<summary>
 gets the default RSA provider using the specified key size; 
 note that Microsoft's CryptoAPI has an underlying file system dependency that is unavoidable
 </summary>
	<remarks>
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member><member name="T:ATLib.Encryption.Asymmetric">
	<summary>
 Asymmetric encryption uses a pair of keys to encrypt and decrypt.
 There is a "public" key which is used to encrypt. Decrypting, on the other hand, 
 requires both the "public" key and an additional "private" key. The advantage is 
 that people can send you encrypted messages without being able to decrypt them.
 </summary>
	<remarks>
 The only provider supported is the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/>
	</remarks>
</member><member name="F:ATLib.Encryption.Data.DefaultEncoding">
	<summary>
 Determines the default text encoding across ALL Data instances
 </summary>
</member><member name="F:ATLib.Encryption.Data.Encoding">
	<summary>
 Determines the default text encoding for this Data instance
 </summary>
</member><member name="M:ATLib.Encryption.Data.#ctor">
	<summary>
 Creates new, empty encryption data
 </summary>
</member><member name="M:ATLib.Encryption.Data.#ctor(System.Byte[])">
	<summary>
 Creates new encryption data with the specified byte array
 </summary>
</member><member name="M:ATLib.Encryption.Data.#ctor(System.String)">
	<summary>
 Creates new encryption data with the specified string; 
 will be converted to byte array using default encoding
 </summary>
</member><member name="M:ATLib.Encryption.Data.#ctor(System.String,System.Text.Encoding)">
	<summary>
 Creates new encryption data using the specified string and the 
 specified encoding to convert the string to a byte array.
 </summary>
</member><member name="P:ATLib.Encryption.Data.IsEmpty">
	<summary>
 returns true if no data is present
 </summary>
</member><member name="P:ATLib.Encryption.Data.StepBytes">
	<summary>
 allowed step interval, in bytes, for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.StepBits">
	<summary>
 allowed step interval, in bits, for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.MinBytes">
	<summary>
 minimum number of bytes allowed for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.MinBits">
	<summary>
 minimum number of bits allowed for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.MaxBytes">
	<summary>
 maximum number of bytes allowed for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.MaxBits">
	<summary>
 maximum number of bits allowed for this data; if 0, no limit
 </summary>
</member><member name="P:ATLib.Encryption.Data.Bytes">
	<summary>
 Returns the byte representation of the data; 
 This will be padded to MinBytes and trimmed to MaxBytes as necessary!
 </summary>
</member><member name="P:ATLib.Encryption.Data.Text">
	<summary>
 Sets or returns text representation of bytes using the default text encoding
 </summary>
</member><member name="P:ATLib.Encryption.Data.Hex">
	<summary>
 Sets or returns Hex string representation of this data
 </summary>
</member><member name="P:ATLib.Encryption.Data.Base64">
	<summary>
 Sets or returns Base64 string representation of this data
 </summary>
</member><member name="M:ATLib.Encryption.Data.ToString">
	<summary>
 Returns text representation of bytes using the default text encoding
 </summary>
</member><member name="M:ATLib.Encryption.Data.ToBase64">
	<summary>
 returns Base64 string representation of this data
 </summary>
</member><member name="M:ATLib.Encryption.Data.ToHex">
	<summary>
 returns Hex string representation of this data
 </summary>
</member><member name="T:ATLib.Encryption.Data">
	<summary>
 represents Hex, Byte, Base64, or String data to encrypt/decrypt;
 use the .Text property to set/get a string representation 
 use the .Hex property to set/get a string-based Hexadecimal representation 
 use the .Base64 to set/get a string-based Base64 representation 
 </summary>
</member><member name="M:ATLib.Encryption.Utils.ToHex(System.Byte[])">
	<summary>
 converts an array of bytes to a string Hex representation
 </summary>
</member><member name="M:ATLib.Encryption.Utils.FromHex(System.String)">
	<summary>
 converts from a string Hex representation to an array of bytes
 </summary>
</member><member name="M:ATLib.Encryption.Utils.FromBase64(System.String)">
	<summary>
 converts from a string Base64 representation to an array of bytes
 </summary>
</member><member name="M:ATLib.Encryption.Utils.ToBase64(System.Byte[])">
	<summary>
 converts from an array of bytes to a string Base64 representation
 </summary>
</member><member name="M:ATLib.Encryption.Utils.GetXmlElement(System.String,System.String)">
	<summary>
 retrieve an element from an XML string
 </summary>
</member><member name="M:ATLib.Encryption.Utils.GetConfigString(System.String,System.Boolean)">
	<summary>
 Returns the specified string value from the application .config file
 </summary>
</member><member name="T:ATLib.Encryption.Utils">
	<summary>
 Friend class for shared utility methods used by multiple Encryption classes
 </summary>
</member><member name="P:ATLib.SpecGroups.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Ads(i)
 </summary>
	<param name="index">index in the range 0...Ads.count-1</param>
	<value>Ad object from Ads collection, at the indexed postion.</value>
</member><member name="M:ATLib.SpecGroups.Add(ATLib.SpecGroup)">
	<summary>
 Adds an Ad object to the Ads collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Ad object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.SpecGroups.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.SpecGroups.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.SpecGroups.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.SpecGroups.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.SpecGroups">
	<summary>
		<para>The spec dictionary contains definitions of all the specs on a per classification basis.
 </para>
	</summary>
</member><member name="T:ATLib.SpecGroup.DisplayTypes">
	<summary>
 Defines the display types for the spec builder
 </summary>
	<includesource>yes</includesource>
</member><member name="M:ATLib.SpecGroup.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
</member><member name="P:ATLib.SpecGroup.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.SpecGroup.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.SpecGroup.ClassificationID">
	<summary>
 Returns the ID of the user who placed the Ad
 </summary>
</member><member name="P:ATLib.SpecGroup.Classification">
	<summary>
 Returns the Classfication object that the spec group is in
 </summary>
</member><member name="P:ATLib.SpecGroup.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically Valued boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.SpecGroup.SortKey">
	<summary>
 Specifies the Production status of the Ad
 </summary>
</member><member name="P:ATLib.SpecGroup.Name">
	<summary>
 Name - name of the spec group
 </summary>
</member><member name="P:ATLib.SpecGroup.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.SpecGroup.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.SpecGroup.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.SpecGroup.SpecDefinitions">
	<summary>Embedded collection of spec definition objects.</summary>
	<returns>Returns collection of spec definitions subordinate to the publication whose status is as requested</returns>
</member><member name="P:ATLib.SpecGroup.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.SpecGroup.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.SpecGroup.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.SpecGroup">
	<summary>
		<para> The spec definiton object holds the definition of a specification
 </para>
	</summary>
</member><member name="T:ATLib.Constants">
	<summary>
 The constants class holds all string literals. These literals are used throughout the
 web app and the inhouse apps for error messages, proforma image names, icon names etc.
 </summary>
</member><member name="P:ATLib.Classifications.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG Classifications(i)
 </summary>
	<param name="index">index in the range 0...Classifications.count-1</param>
	<value>Classification object from Classifications collection, at the indexed postion.</value>
</member><member name="M:ATLib.Classifications.Add(ATLib.Classification)">
	<summary>
 Adds a Classification object to the Classifications collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">Classification object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.Classifications.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.Classifications.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Classifications.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.Classifications.GetClassificationCount(ATLib.ATSystem.ObjectTypes,System.Int32)">
	<summary>
 Returns the total number of classifications according the the object type and ID passed
 </summary>
	<param name="ObjectType"></param>
	<param name="ObjectID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ATLib.Classifications.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.Classifications">
	<summary>
 The Classifications class implements a collection of Classification objects, which are directly subordinate
 to the System object. System Colors provide a single system wide reference of all spot colors that can be defined
 in inks, foils and paper. System Colors are maintained in the RGB color space.
 </summary>
</member><member name="M:ATLib.Classification.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.Classification.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Classification.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.Classification.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Classification.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.Classification.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.Classification.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.Classification.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.Classification.SortKey">
	<summary>
 Defines the sort sequence of colors in the collection. This is used because VComp requires that
 foils in particular are enumerated in a user-definable order.
 </summary>
</member><member name="P:ATLib.Classification.Category">
	<summary>
 Parent system object, to which the Classifications are subordinate
 </summary>
	<value></value>
</member><member name="P:ATLib.Classification.Ads">
	<summary>Embedded collection of Ad objects. Holds all ads in the classification</summary>
	<value>Collection of Ad objects in the classification</value>
</member><member name="P:ATLib.Classification.Ads(ATLib.Ad.ProdnState)">
	<summary>Embedded collection of Ad objects. Holds all ads in the classification</summary>
	<value>Collection of Ad objects in the classification</value>
	<param name="ProdnStatus">Production Status</param>
</member><member name="P:ATLib.Classification.SpecGroups">
	<summary>Embedded collection of SpecGroup objects. Holds all spec definitions in the Classification</summary>
	<value>Collection of SpecGroup objects in the classification</value>
</member><member name="P:ATLib.Classification.CategoryID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.Classification.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.Classification.IsNameUnique(System.String)">
	<summary>
 Checks that the supplied name is unique within the scope of the color type, paper, ink or foil.
 </summary>
	<param name="Name">Nzme to test for uniqueness</param>
	<returns>True if name is unique within scope, false otherise.</returns>
</member><member name="M:ATLib.Classification.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="T:ATLib.Classification">
	<summary>
		<para> The Classification object holds all data retrieved from a specified row of the Classification table.
</para>
		<para>It is always accessed as part of the Classifications collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded Classifications collection
  property of the parent. 
 </para>
	</summary>
</member><member name="T:ATLib.Engine.EngineStates">
	<summary>
 Defines the states that the engine can be in.
 </summary>
	<includesource>yes</includesource>
</member><member name="E:ATLib.Engine.EngineEvent">
	<summary>
 Fires when an EQItem is added to the queue. There are no parameters to the event
 since the entire EQ can be inspected and processed via the EngineQ Collection.
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.Engine.InitializeLifetimeService">
	<summary>
 This allows the object to live foreever. See Microsoft Remoting documentation for more information.
 </summary>
</member><member name="P:ATLib.Engine.Status">
	<summary>
 This is the current status of the engine, see EngineServices.EngineStates which instantiated this copy of EngineServices.
 </summary>
</member><member name="P:ATLib.Engine.JobTimeout">
	<summary>
Defines the time period in ms before the client will be resumed if the engine has 
 not completed the job or resumed client before the timeout expires. 
 </summary>
</member><member name="P:ATLib.Engine.JobsOK">
	<summary>
Returns the total number of successfully processed jobs since engine start. Incremented by the engine for each successful job that is processed.
 </summary>
</member><member name="P:ATLib.Engine.JobsBad">
	<summary>
Returns the total number of unsuccessfully processed jobs since engine start. Incremented by the engine for each job that fails to process. 
 </summary>
</member><member name="P:ATLib.Engine.EngineQ">
	<summary>
This property is the embedded queue of EQItems, EQItems are created and enqueued by the client and dequeued and serviced by the engine. 
 </summary>
</member><member name="P:ATLib.Engine.Ident">
	<summary>
 Returns a human readable statement identifying the host name and IP address of the machine that the engine is running on.
 </summary>
</member><member name="M:ATLib.Engine.HostName">
	<summary>
 Returns the name of the machine that the engine is running on.
 </summary>
</member><member name="M:ATLib.Engine.HostIP">
	<summary>
 Returns the IP address of the machine that the engine is running on.
 </summary>
</member><member name="M:ATLib.Engine.Enqueue(ATLib.EQItem)">
	<summary>
		<para>This method is called by the client to enqueue an EQItem to the engine queue. 
 This method adds a new EQItem in the client's thread space
 These options are specified in the Command word of the EQItem.
  Items can only be successfully enqueued if the engine is currently running or busy (ie not paused or in error).
  If the engine cannot accept new items, the EQItem Status word is updated and method immdediately returns.
 </para>
		<para>Otherwise, Enqueue is a suspension call. When the item is successfully enqueued, the client thread will suspend
 until either the engine resumes the client, or one of the resumeTimeout or jobTimeout periods is exhausted.
 In all cases, the EQItem Status word contains the results of the processing.
 </para>
	</summary>
</member><member name="T:ATLib.Engine">
	<summary>
		<para>EngineServices provides cross-network communication with the engine from a variety of
 calling points. EngineServices uses Microsoft remoting technology to provide common instance of
 a class that can be simulteanously instantiated and mapped from a variety of agents. EngineServices in turn embeds the EQItem class
  which is serializable and can therefore be transmitted over the network between the engine and the client.
  EngineServices is first instantiated by the Engine, and then this same copy of the object can be accessed
 over the network by any client subscriber.
 </para>
		<para>The overall design of EngineServices is that it implements a queue of EQ items, where each EQ Item carries a job for the engine to perform, and also
 provides a feedback for the caller to report on the results of the engine processing. The overall flow is that 1) a network client instantiates an EQ Item, and then
  enqueues it to EngineServices. The client supspends at this point.
  2) This fires an event which is serviced by the engine. The engine dequeues the item and procsses it.
 3) When the engine is ready to resume the client, it updates the EQ item with a resume status, and continues any post-resume processing.
  4) The client resumes, and decodes the returned results which are encoded into the EQItem.
  Note that this entire sequence is backstopped by a timer object which will resume the client after a timeout period(defined 
 in the system object) it the engine does not complete processing in the required timeframe.
 </para>
	</summary>
</member><member name="T:ATLib.EQItem.CommandBits">
	<summary>
 Defines a set of ORable bits which in toto make up an integer value which defines the type of operation that the caller is requesting of the engine when the Q Item is processed.
 </summary>
	<includesource>yes</includesource>
</member><member name="T:ATLib.EQItem.StatusBits">
	<summary>
 Defines a set of ORable bits which represents the response of the engine to the caller when a Q Item is processed.
 </summary>
	<includesource>yes</includesource>
</member><member name="F:ATLib.EQItem.Command">
	<summary>
 32 bit command word, set by client from one of EQItem.CommandBits
 </summary>
</member><member name="F:ATLib.EQItem.Status">
	<summary>
 32 bit status word, set by engine from one of EQItem.StatusBits
 </summary>
</member><member name="F:ATLib.EQItem.ObjectID">
	<summary>
 Either the template ID or the document ID of the item to be processed
 </summary>
</member><member name="F:ATLib.EQItem.executionTime">
	<summary>
 Exectution time in ms
 </summary>
</member><member name="P:ATLib.EQItem.Ident">
	<summary>
 Test property used to determine which machine this code is executing on.
 </summary>
</member><member name="M:ATLib.EQItem.SetCommandBits(ATLib.EQItem.CommandBits)">
	<summary>
 Sets command bits into the EQ Command word
 </summary>
	<param name="newbits">Bitmap to set, from EQItem.CommandBits</param>
</member><member name="M:ATLib.EQItem.ClearCommandBits(ATLib.EQItem.CommandBits)">
	<summary>
 Clears command bits from the EQ Command word
 </summary>
	<param name="newbits">Bitmap to set, from EQItem.CommandBits</param>
</member><member name="M:ATLib.EQItem.TestCommandBits(ATLib.EQItem.CommandBits)">
	<summary>
 Tests bits bits in the EQ Command word
 </summary>
	<param name="newbits">Bitmap to set, from EQItem.CommandBits</param>
	<returns>True if any bits are set, false if all bits are clear.</returns>
</member><member name="M:ATLib.EQItem.SetStatusBits(ATLib.EQItem.StatusBits)">
	<summary>
 Sets status bits into the EQ Status word
 </summary>
	<param name="newbits">Bitmap to set, from EQItem.StatusBits</param>
</member><member name="M:ATLib.EQItem.ClearStatusBits(ATLib.EQItem.StatusBits)">
	<summary>
 Clears status bits from the EQ Status word
 </summary>
	<param name="newbits">Bitmap to set, from EQItem.CommandBits</param>
</member><member name="T:ATLib.EQItem">
	<summary>
		<para>
 The EQItem class implements a serializable object that can be transmitted
 across the wire, between the engine  and a client. The object has a simple
 4-integer construction - a Command word which contains a set of bits which tells
 the engine what to do, a Status word which contains a set of bits which describe
 what the engine did, an objectID word which is the ID of either a Template or
 Doc object, and an integer which holds the execution time in ms.
 </para>
	</summary>
</member><member name="P:ATLib.RotatorAds.Item(System.Int32)">

 ''' <summary>
 Default Item property, used for indexing into the returned collection. EG RotatorAds(i)
 </summary>
	<param name="index">index in the range 0...RotatorAds.count-1</param>
	<value>RotatorAd object from RotatorAds collection, at the indexed postion.</value>
</member><member name="M:ATLib.RotatorAds.Add(ATLib.RotatorAd)">
	<summary>
 Adds a RotatorAd object to the RotatorAds collection. This however does not update the database.
 To write the newly added object to the database, call the Update Method of the parent collection or the Update method of the added object.
 </summary>
	<param name="value">RotatorAd object</param>
	<returns>Index of added object</returns>
</member><member name="M:ATLib.RotatorAds.Retrieve">
	<summary>Retrieves the entire set of Objects and populates the parent collection.</summary>
</member><member name="M:ATLib.RotatorAds.Retrieve(System.String)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="HexID">ObjectID, represented as an 8 character hex string</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.RotatorAds.Retrieve(System.Int32)">
	<summary>Retrieves a specific object, identified by the value of its ID.
 The parent collection is populated with the retrieved object, and the object is also explicitly returned to the caller.
 If the object is not found, Nothing is returned and the collection will be empty</summary>
	<param name="ID">ObjectID, represented as an integer</param>
	<returns>Object if found, otherwise Nothing</returns>
</member><member name="M:ATLib.RotatorAds.Update">
	<summary>
 Updates all objects in the collection which have been modified since the collection was
 retrieved from the database. Individual objects may either have been updated, marked for deletion
 (Delete property set to True) or newly created. Objects in the collection which have not been
 modified by any of these three ways are not written back to the database.
 </summary>
</member><member name="T:ATLib.RotatorAds">
	<summary>
		<para>The RotatorAds collection is used to hold the set of RotatorAd
 objects. The collection is normally accessed by using the RotatorAds property of the parent System object.
  This class manages the RotatorAd database table. Any object in the collection can be modified and then written back to the database,
  by either the Update method of the collection class, or the Update method of each object within the collection.
 </para>
	</summary>
</member><member name="M:ATLib.RotatorAd.#ctor">
	<summary>
 Instantiates the object. When instantiated, the ID property will be set to ATSystem.SysConstants.nullValue and the Status word will be zero.
 </summary>
	<remarks></remarks>
</member><member name="P:ATLib.RotatorAd.ID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as a 32 bit integer</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.RotatorAd.hexID">
	<summary>Object ID, which is the identity value of the database Primary Key, represented as an 8 character hex string</summary>
	<value>Object ID as an 8 character hex string</value>
</member><member name="P:ATLib.RotatorAd.CreateTime">
	<summary>Timestamp, read from dbTime, that the database object was created</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.RotatorAd.ModifyTime">
	<summary>Timestamp, read from dbTime, that the database object was last modified</summary>
	<value>Long timestamp, in the current culture</value>
</member><member name="P:ATLib.RotatorAd.Status">
	<summary>This is a set of 32 boolean status flags, implemented as a 32 bit
 integer. The bit values are defined in ATSystem.StatusBits. The status property can
 be used to set/test/clear bits within the word. For operations on individual
 bits, it may be more convenient to use the specifically named boolean properties
 of this object.</summary>
	<returns>32 status bits, defined in ATSystem.StatusBits, and implemented as an
 integer</returns>
	<example>
		<code>dim currentStatus as ATSystem.StatusBits = obj.Status
 currentStatus = CurrentStatus or (ATSystem.StatusBits.isStressed or ATSystem.StatusBits.hasCustomStressedIcon) 'sets these bits
 currentStatus = CurrsntStatus and not ATSystem.StatusBits.isOpenForEdit 'clear this bit
 obj.Status = currentStatus 'modify object in memory
 obj.Update 'and update to db</code></example>
</member><member name="P:ATLib.RotatorAd.Name">
	<summary>Object Name. When this property is set, the name is truncated to 255
 characters and sanitized to remove invalid characters. See
 CommonRoutines.Sanitize. If scope-specific uniqueness of Name is required on
 input, test the proposed name first by calling IsNameUnique</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.Category">
	<summary>Category</summary>
</member><member name="P:ATLib.RotatorAd.Type">
	<summary>Type</summary>
</member><member name="P:ATLib.RotatorAd.Width">
	<summary>Width</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.Height">
	<summary>Height</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.MarginTop">
	<summary>MarginTop</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.MarginBottom">
	<summary>MarginBottom</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.MarginLeft">
	<summary>MarginLeft</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.MarginRight">
	<summary>MarginLeft</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.BGColor">
	<summary>BG Color</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.UsageCount">
	<summary>Usage Count</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.ClickCount">
	<summary>Usage Count</summary>
	<returns>Object Name</returns>
</member><member name="P:ATLib.RotatorAd.BGColorHTML">
	<summary>
 Returns the BG color as a hex string prefixed by # - html format
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ATLib.RotatorAd.ImageURL">
	<summary>URL of where the ad image is found</summary>
</member><member name="P:ATLib.RotatorAd.ClickURL">
	<summary>URL of where the user goes when an ad is clicked</summary>
</member><member name="P:ATLib.RotatorAd.NavTarget">
	<summary>This is a memory-only property which is not written to the database.
 Its plugged by the caller afte the object is retrieved to prime it with the
 target URL of the page to load if the object is clicked. This is done before
 databinding, so when the object is databound to a control, the click URL is
 exposed to the control as a bindable property of the object.</summary>
	<returns>String value, as primed by caller</returns>
</member><member name="P:ATLib.RotatorAd.System">
	<summary>
 Embedded system object, to which this RotatorAd is subordinate.
 </summary>
	<value></value>
</member><member name="P:ATLib.RotatorAd.SystemID">
	<summary>ID of the System, to which this object is directly subordinate</summary>
	<value>Object ID as an integer</value>
</member><member name="P:ATLib.RotatorAd.Deleted">
	<summary>Boolean value which defines if the object is marked for deletion. The
 object is neither removed from the parent collection nor deleted from the
 database when the property is set to true. Rather, the object will be physically
 deleted from the db and removed from the collection on the next call to
 object.Update or objectCollection.Update</summary>
	<returns>true if object is marked for deletion, false otherwise</returns>
</member><member name="M:ATLib.RotatorAd.IncrClickCount">
	<summary>
 Increments the ad click count
 </summary>
	<remarks></remarks>
</member><member name="M:ATLib.RotatorAd.Update">
	<summary>Called to update the object back into the database.
 <para></para>
		<para>If the object has been modified since retrieval, then it is updated into
 the db.</para>
		<para>If the object has been marked for deletion (obj.deleted=true) then it is
 deleted from the database.</para>
		<para>If the object has been newly instantiated, and update has not been
 previously called, then a new record is written to the database, and the ID of
 the newly created record is returned </para></summary>
	<remarks>If a newly substantiated object is to be written to the database,
 ensure that all properties, especially parentID references have been correctly
 plugged prior to calling Update</remarks>
	<returns>Object ID, which is the identity value of the record's Primary
 Key</returns>
</member><member name="M:ATLib.RotatorAd.doDelete">
	<summary>Physically deletes the object and subordinate structure from the db
</summary>
</member><member name="T:ATLib.RotatorAd">
	<summary>
		<para> The RotatorAd object holds all data retrieved from a specified row of the RotatorAd table.
</para> It is always accessed as part of the RotatorAds collection, which is either
  explicitly read from the database by one of the Retrieve methods, or implicitly populated
  through an embedded RotatorAds collection
  property of the parent. 
 </summary>
</member>
</members>
</doc>